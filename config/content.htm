<h1>About</h1>
<p>本課程為網際內容管理 (Web-based Content Management), 每週上課三小時, 其中兩小時為教學時段, 另外一小時為學員實際操作與練習時段. 課程內容主要承接計算機程式課程中的 Brython 與 Python 初階 Programming 技術. 教導學員如何在 Windows 與 Linux 操作系統環境中搭建全球資訊網伺服器 (WWW Server), 如何建立個人與團隊網站, 以及如何利用 Replit 與自行安裝的 Windows 與 Linux 操作系統建立網際內容管理程式套件.</p>
<p>課程內容分為三部分:</p>
<ol>
<li><a href="https://brython.info/">Brython</a> 與 Python 程式 (建立個人 <a href="https://pages.github.com/">Github Pages</a> 靜態網站與 <a href="https://replit.com/">Replit</a> 上的動態網站)</li>
<li>Windows 與 Linux 上的網站  (<a href="https://nginx.org/">Nginx</a> + <a href="https://www.stunnel.org/">Stunnel</a> 網站安裝與設定, 與個人動態與靜態網站結合)</li>
<li><a href="https://github.com/mdecycu/cmsimde">cmsimde</a> 程式開發 (如何利用手機維護個人動態與靜態網站)</li>
</ol>
<p>課程評量: 線上測驗 (50%), 出席、協同專案與自我評量 (50%).</p>
<p>課程必備: USB 3.0 以上規格之隨身碟 (32GB 以上), 適用於電腦或手機之耳機.</p>
<p>課程選項配備: 電腦用麥克風與 Webcam.</p>
<p>本倉儲以 <a href="https://github.com/mdecycu/cmsite">https://github.com/mdecycu/cmsite</a> 作為 Template 複製, 倉儲位於 <a href="https://github.com/mdecycu/wcm2023">https://github.com/mdecycu/wcm2023</a></p>
<p>課程靜態網頁: <a href="https://mde.tw/wcm2023">https://mde.tw/wcm2023</a></p>
<p>MS Teams: sblk6ao (for @nfu users only)</p>
<p>本課程在使用並研究如何改善 <a href="https://github.com/mdecycu/cmsimde">https://github.com/mdecycu/cmsimde</a> 網際內容管理系統.</p>
<p>本課程要求學員下載下載</p>
<ol>
<li><a href="https://nfuedu.sharepoint.com/:u:/s/cad2022/EXABheFswCtEtT5p-9uDN4ABuK3DASC8mKkFzpLA3q7f6g?e=AqXydW" rel="noreferrer noopener" tabindex="-1" target="_blank" title="https://nfuedu.sharepoint.com/:u:/s/cad2022/exabhefswctett5p-9udn4abuk3dasc8mkkfzpla3q7f6g?e=aqxydw">portable_python_w10_nx_robodk.7z</a> (1.03 GB, for @nfu users only) 可攜 Python 程式系統.</li>
<li>或 <a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EWWklzSXEqZAoAsF7YCiUdQBq3Frt-VQl9p0ah8ZE2AoBQ?e=U07OBT">Python3108_for_2023.7z</a> 450MB, 解開壓縮後放入 USB 隨身碟.</li>
<li>或納入 Portable MiKTeX 之後的 可攜 Python 程式套件: <a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/Ecr0uG0UzJlBtwpYzztBupUBkUdQsQgmd9PWzfjTZBsB8w?e=zlb42j">wcm_portable_w2-4-miktex.7z</a>.</li>
</ol>
<p>有關如何自行製作可攜 Python 程式套件, 請參考 <a href="https://mde.tw/wcm2023/content/Python.html">https://mde.tw/wcm2023/content/Python.html</a> 說明.</p>
<p>行事曆</p>
<p><a href="https://calendar.google.com/calendar/embed?src=mde.nfu.edu.tw_3439313938333136353439%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;mode=week&amp;src=mde.nfu.edu.tw_35303530373431313438%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;src=yen%40gm.nfu.edu.tw&amp;ctz=Asia%2FTaipei">全頁檢視</a></p>
<p><iframe height="600" src="https://calendar.google.com/calendar/embed?src=mde.nfu.edu.tw_3439313938333136353439%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;mode=week&amp;src=mde.nfu.edu.tw_35303530373431313438%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;src=yen%40gm.nfu.edu.tw&amp;ctz=Asia%2FTaipei" width="800"></iframe></p><h2>Motivation</h2>
<p>學習網際內容管理的動機:</p>
<p style="padding-left: 30px;">將數位內容放入 www 伺服器, 以方便維護管理及展示</p>
<p>網際內容管理牽涉:</p>
<ol>
<li>數位內容 - 以數位流程(Github Pages)處理事務並建立對應內容</li>
<li>www 伺服器 - 以全球資訊網架構管理內容 - html, css, Javascript</li>
<li>維護管理 - Git, Repository, Web pages, Python</li>
<li>展示 - Web browser oriented</li>
</ol>
<p>教導或學習網際內容管理的過程, 必須自問學這東西有用嗎? 您自己(平時, 一直)使用嗎?</p>
<p>數位參考教材:</p>
<p style="padding-left: 30px;"><a href="https://nfuedu-my.sharepoint.com/:b:/g/personal/yen_nfu_edu_tw/ET59eCPLupBGgIUmBog-yE0BMkL4RdYWNzpBxW-PzvnX1A?e=RKYWbq">1999 How to be a star engineer</a>, <a href="https://nfuedu-my.sharepoint.com/:b:/g/personal/yen_nfu_edu_tw/EQtBbwaFSKdCrnxljlGU9NMBcl70NO4OghYo5caSpLcvcw?e=E9iyjL">如何成為一位傑出的工程師</a> (for @nfu users only)</p>
<p style="padding-left: 30px;"><a href="https://nfuedu-my.sharepoint.com/:b:/g/personal/yen_nfu_edu_tw/EZzE7rKRQ3ZIvSoavwvZB6gBmupyVpzqRuvH7yO1i0Yj1w?e=h5SBg0">2023 Cloud Computing Technology</a> (for @nfu users only)</p>
<p style="padding-left: 30px;"><a href="https://nfuedu-my.sharepoint.com/:b:/g/personal/yen_nfu_edu_tw/EZpULDm6GfNCsuTiqfloxnYBV1GzC1lG39SjU6ooqLWbyA?e=vuIlOV">2021 Cloud Computing Basics</a> (for @nfu users only)</p>
<p></p><h2>PPython</h2>
<p>Portable Python 製作流程:</p>
<ol>
<li>先利用一款舊版的 Python 環境, 在命令列執行 gen_portable_python.py, 可以在 c:\tmp\python311 中建立基本的可攜 Python 檔案.</li>
<li>在 c:\tmp\python311 目錄中加入 <a href="/downloads/start_stop_batch_files.7z">start_ipv6.bat 與 stop.bat 檔案</a>.</li>
<li>接著從 <a href="https://www.scintilla.org/SciTEDownload.html">https://www.scintilla.org/SciTEDownload.html</a> 下載 SciTE 編輯器, 放入 c:\tmp\python311\data 目錄中, 並且 wscite 編輯器的目錄是否與 start_ipv6.bat 中的 set path_scite=%Disk%:\wscite521; 互相對應.</li>
<li>在 c:\tmp\python311\data 目錄中建立 tmp 目錄.</li>
<li>以 start_ipv6.bat 測試可攜 Python 程式系統能否開啟, 並測試能否以 stop.bat 關閉.</li>
<li>再次啟動 start_ipv6.bat, 且<a href="https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=&amp;cad=rja&amp;uact=8&amp;ved=2ahUKEwjEt8eus9_9AhVjRmwGHfnOCdcQFnoECAwQAQ&amp;url=https%3A%2F%2Fbootstrap.pypa.io%2Fget-pip.py&amp;usg=AOvVaw0zKVO_zW0nkF7s0zdjWFNj">下載 get-pip.py 檔案</a>後, 在命令列進入 get-pip.py 檔案所在目錄, 執行 python get-pip.py, 以便安裝 pip 套件. (之所以要使用可攜路徑中的 python.exe 執行 get-pip.py, 是因為 scripts/pip.exe 會將執行的 python.exe 絕對路徑存入二位元檔案中)</li>
<li>假如要執行 openai API 相關程式, 在可攜系統中的命令列中, 以 pip install openai 安裝模組.</li>
<li>假如要執行 cmsimde 動態網站, 以 pip install flask flask_cors bs4 lxml pelican markdown leo pyopenssl 安裝所需模組.</li>
</ol>
<p>flask 為 web-based 程式開發框架</p>
<p>flask_cors 為允許跨網域擷取資料模組</p>
<p>bs4 與 lxml 主要用於動態網站檔案分頁</p>
<p>pelican, markdown 與 Leo 為建立網誌所需模組</p>
<p>pyopenssl 為在近端啟動時自動產生網站數位簽章所需模組</p>
<p>Git client: <a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a> 放進 data 目錄</p>
<p>Putty: <a href="https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html">https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html</a> 放進 data 目錄</p>
<p>其他工具: <a href="https://learn.microsoft.com/en-us/sysinternals/downloads/process-explorer">Process Explorer</a>, <a href="https://www.debugmode.com/wink/">Wink</a>, <a href="https://getsharex.com/">ShareX</a>, <a href="https://portableapps.com/apps/internet/filezilla_portable">filezilla</a>, <a href="https://learn.microsoft.com/zh-tw/sysinternals/downloads/zoomit">zoomit</a>, <a href="https://sourceforge.net/projects/kdiff3/">kdiff3</a>, <a href="https://tools.stefankueng.com/grepWin.html">grepwin</a>,</p>
<hr/>
<p>gen_portable_python.py</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import urllib.request
import os
 
# basic files for Python installation
py_list = ["core", "dev", "exe", "lib", "tcltk", "tools"]
# Python version
version = "3.11.2"
# Python msi download URL
ftp = "https://www.python.org/ftp/python/" + version + "/amd64/"
# location for Portable Python
path = "C:\\tmp\\python311\\data\\Python311"
# create directory
try:
    os.mkdir(path)
except:
    # path exists
    pass
# get Python installation msi files and extract into target dir
for i in py_list:
    filename = i + ".msi"
    url = ftp + filename
    # download basic python msi file
    urllib.request.urlretrieve(url, filename)
    os.system("msiexec.exe /a " + i + ".msi targetdir=" + path)
    # delete msi file
    os.remove(path + "\\" + i + ".msi")</pre>
<p></p><h2>nfulist</h2>
<p><a href="/downloads/nfulist_nfu_cycu.7z">nfulist_nfu_cycu.7z</a></p>
<p>1a 網際內容管理學員學號名單: <a href="https://nfu.cycu.org?semester=1112&amp;courseno=0739&amp;column=True">1a wcm nfulist (0739)</a></p>
<p>2a 協同產品設計實習學員學號名單: <a href="https://nfu.cycu.org/?semester=1112&amp;courseno=0762&amp;column=True">2a cd nfulist (0762)</a></p>
<p>2b 協同產品設計實習學員學號名單: <a href="https://nfu.cycu.org/?semester=1112&amp;courseno=0774&amp;column=True">2b cd nfulist (0774)</a></p>
<p>5j 網際內容管理修課學員學號名單: <a href="https://nfu.cycu.org/?semester=1112&amp;courseno=2464&amp;column=True">5j wcm nfulist (2464)</a></p>
<p>2023.03.08 所有修課學員學號檔案: <a href="/downloads/2023spring_all_stud_num.txt">2023spring_all_stud_num.txt</a></p>
<p>直接以 Brython 讀取上列所有學員學號檔案後, 計算共有多少學員修課:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
url = "https://mde.tw/wcm2023/downloads/2023spring_all_stud_num.txt"
data = open(url).read()
#print(data)
# 去掉最後的空白行資料 (必須確認跳行符號為 \r\n 或 \n
all_stud = data.split("\r\n")[:-1]
print("總共有 " + str(len(all_stud)) + "名學員")</pre>
<p>如何判讀上述學號檔案是否有重複名單(一人修兩門以上課程)?</p>
<p><a href="https://mde.tw/wcm2023/content/Brython?src=https://gist.githubusercontent.com/mdecycu/77790f970bc35119f155fa97d0f26151/raw/5409ff3b69ae198618b5ffddef2557168cbacc51/check_duplicate_stud.py">在線上執行下列程式</a>.</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
url = "https://mde.tw/wcm2023/downloads/2023spring_all_stud_num.txt"
data = open(url).read()
#print(data)
# 去掉最後的空白行資料 (必須確認跳行符號為 \r\n 或 \n
all_stud = data.split("\r\n")[:-1]
print("總共有 " + str(len(all_stud)) + "名學員")
all_set = set(all_stud)
print(len(all_set))
# 若上述兩個數字相同, 
# 表示並無同一學員選兩門課的情形, 
# 但是要設法列出重複資料

# 設定 uniq_list 為資料沒有重複出現的內容
uniq_list = []
# dup_list 則為重複出現的數列
dup_list = []
for i in all_stud:
    # 將沒有重複的內容放入 uniq_list
    if i not in uniq_list:
        uniq_list.append(i)
    else:
        dup_list.append(i)
print("重複的資料數列總數: ", len(dup_list))
print("沒有重複的資料數列總數: ", len(uniq_list))</pre>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from flask import Flask, request 
from flask_cors import CORS
  
import requests
import bs4
#import ssl
  
'''
1a - 2b
?semester=1111&amp;courseno=0747&amp;column=True 

?semester=1111&amp;courseno=0761&amp;column=True 

?semester=1111&amp;courseno=0773&amp;column=True 

?semester=1111&amp;courseno=0786&amp;column=True 

if 17.8 as nfu.cycu.org, no proxy needed
'''
proxies ={
'http': 'http://kmolag:kmolab@[2001:288:6004:17::4]:3128',
'https': 'http://kmolab:kmolab@[2001:288:6004:17::4]:3128'
}

app = Flask(__name__)
CORS(app)
  
@app.route('/studlist')
@app.route('/')
def studlist():
    semester = request.args.get('semester')
    courseno = request.args.get('courseno')
    column = request.args.get('column')

    if semester == None:
        semester = '1091'
    if courseno == None:
        courseno = '0762'
    
    headers = {'X-Requested-With': 'XMLHttpRequest'}

    url = 'https://qry.nfu.edu.tw/studlist_ajax.php'
    post_var = {'pselyr': semester, 'pseqno': courseno}
  
    #result = requests.post(url, data = post_var, headers = headers, proxies = proxies)
    result = requests.post(url, data = post_var, headers = headers)
    soup = bs4.BeautifulSoup(result.content, 'lxml')
    table = soup.find('table', {'class': 'tbcls'})
    data = []
    rows = table.find_all('tr')
    for row in rows:
        cols = row.find_all('td')
        cols = [ele.text.strip() for ele in cols]
        data.append([ele for ele in cols if ele]) # Get rid of empty values
    output = ""
    for i in data[2:]:
        #print(i[0])
        if column == "True":
            output +=i[0] + "&lt;/br&gt;"
        else:
            output +=i[0] + "\n"
        
    return output
    #return  str(pselyr) + " + " +str(pseqno)
  
# 即使在近端仍希望以 https 模式下執行
#context = ssl.SSLContext(ssl.PROTOCOL_TLSv1_2)
#context.load_cert_chain('localhost.crt', 'localhost.key')
  
if __name__ == '__main__':
    app.run(host='127.0.0.1', port=8080, debug=True)</pre>
<p>以下將可透過 nfulist 與 studlist 中的資料, 列出各班學員的對應課程倉儲與網頁:</p>
<p></p><h2>Stud</h2>
<p>stud 是一台 Ubuntu server, 讓每一個用戶透過兩個 ports 共享 server  中所設置的外部與內部 ports.</p>
<p>其中以 9 開頭的 port 設定為內部 port,  而 8 開頭的 port 則用於外部連線.</p>
<p>當某一用戶誤用所分配的內部 port 時, 管理者就可以透過 lsof 指令找出該用戶, 並即時加以糾正.</p>
<p>又由於 8 開頭的外部 port 統一由管理者以 Stunnel 啟動並加以管控, 因此一般用戶產生誤用的情況只會發生在內部以 9 開頭的 port.</p>
<p>列出 Ubuntu 中 port 使用相關資訊: lsof -i :9123</p>
<p>lsof: list open files</p>
<p>-i: selects the listing of files any of whose Internet address matches the address specified in i.  If no address is specified, this option selects the listing of all Internet and x.25 (HP-UX) network files.</p>
<hr/>
<p>Ununtu <a href="https://manpages.ubuntu.com/manpages/xenial/man8/newusers.8.html">newusers</a> command to create user account in batch</p>
<p>Ubuntu <a href="https://manpages.ubuntu.com/manpages/jammy/en/man8/userdel.8.html">userdel</a> command to delete user account and directory</p>
<p>delete_user.py (<a href="https://www.geeksforgeeks.org/deleting-a-user-in-linux-using-python-script/">source</a>)</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import os
import subprocess
import sys
import getpass
  
  
def delete_user():
     username = input("Enter Username : ")
  
     try:
         output = subprocess.run(['userdel', username ])
         if output.returncode == 0:
             print("User successfully deleted with given credentials")
  
     except:
         print(f"Failed to delete user.")
         sys.exit(1)
  
delete_user()</pre>
<p>stud template server in vdi</p>
<h3>建立 stud</h3>
<p><a href="https://geekrewind.com/configure-nginx-userdir-feature-on-ubuntu-16-04-lts-servers/">Nginx per user web directories</a> 可以伺服各用戶的靜態網站. 而 stunnel 加上 waitress 則可以伺服各用戶的動態網站.</p>
<p>使用 Ubuntu server 22.04 LTS v2.</p>
<hr/>
<p>Python3 必須能夠執行動態 cmsimde, 因此必須安裝下列 modules:</p>
<p>執行 cmsimde 動態網站需要下列 Python 模組:</p>
<p style="padding-left: 30px;">For Windows:</p>
<p style="padding-left: 60px;">pip install flask flask_cors bs4 lxml pelican markdown leo pyopenssl</p>
<p style="padding-left: 30px;">For Ubuntu:</p>
<p style="padding-left: 60px;">先安裝 pip3:</p>
<p style="padding-left: 90px;">sudo apt install python3-pip</p>
<p style="padding-left: 60px;">接著利用 pip3 安裝執行 cmsimde 所需模組:</p>
<p style="padding-left: 60px;">pip3 install flask flask_cors bs4 lxml pelican markdown leo pyopenssl</p>
<hr/>
<p>安裝 stunnel:</p>
<p style="padding-left: 30px;">sudo apt install stunnel</p>
<p>stunnel 設定檔案 /etc/stunnel/stunnel.conf:</p>
<p>對外 443, 資料由內部伺服器 9443 提供:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">[https]
accept = stud.cycu.org:443
connect = 127.0.0.1:9443
cert = /etc/letsencrypt/live/stud.cycu.org/fullchain.pem
key = /etc/letsencrypt/live/stud.cycu.org/privkey.pem
TIMEOUTclose = 0</pre>
<p>stunnel 服務重新啟動:</p>
<p style="padding-left: 30px;">sudo /etc/init.d/stunnel4 restart</p>
<p>以系統服務設定 stunnel4:</p>
<p style="padding-left: 30px;">sudo systemctl enable stunnel4.service</p>
<hr/>
<p>git clone 倉儲:</p>
<p>因為網路只提供 IPv6, 因此若採 https 進行 git clone, 需要先設定 git config --global http.proxy</p>
<p>接著若要使用 https 執行 git push, 則需要使用 token, 若使用 SSH, 則需要先設定 id_rsa 與 config 代理.</p>
<p>以指令 ssh_keygen 建立 .ssh/id_rsa 與 .ssh/id_rsa.pub</p>
<p>使用下列 ssh 協定中的 config, 必須先安裝 nat:</p>
<p style="padding-left: 30px;">sudo apt install nat</p>
<p>建立 .ssh/config:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">Host github.com
User git
Hostname github.com
ProxyCommand /usr/bin/ncat --proxy p42.cycu.org:3128 --proxy-type http %h %p</pre>
<hr/>
<p>設定 Letsencrypt:</p>
<p style="padding-left: 30px;">sudo snap install core; sudo snap refresh core</p>
<p>snap proxy setup:</p>
<p style="padding-left: 30px;">sudo vi /etc/environment and add the following proxy settings:</p>
<p style="padding-left: 30px;">http_proxy=http://127.0.0.1:3128</p>
<p style="padding-left: 30px;">https_proxy=http://127.0.0.1:3128</p>
<p style="padding-left: 30px;">然後以 sudo systemctl restart snapd 重新啟動 snapd 讓 proxy 設定生效</p>
<p>Install certbot:</p>
<p style="padding-left: 30px;">sudo snap install --classic certbot</p>
<p>Prepare certbot command:</p>
<p style="padding-left: 30px;">sudo ln -s /snap/bin/certbot /usr/bin/certbot</p>
<p>Get certificate:</p>
<p style="padding-left: 30px;">sudo certbot certonly --standalone</p>
<hr/>
<p>install waitress:</p>
<p style="padding-left: 30px;">pip3 install waitress</p>
<p>server.py</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from waitress import serve
from cmsimde import flaskapp

serve(flaskapp.app, listen='127.0.0.1:9443', thread=8)</pre>
<p>執行 server.py:</p>
<p style="padding-left: 30px;">python3 server.py</p>
<p style="padding-left: 30px;">or</p>
<p style="padding-left: 30px;">python3 server.py &amp;</p><h2>Ref</h2>
<p>2015</p>
<p style="padding-left: 30px;"><a href="https://github.com/coursemdetw/2015wcm">https://github.com/coursemdetw/2015wcm</a></p>
<p>2016</p>
<p style="padding-left: 30px;"><a href="https://github.com/2015fallhw/wcmw13">https://github.com/2015fallhw/wcmw13</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/2015fallhw/2016springwcm_final">https://github.com/2015fallhw/2016springwcm_final</a></p>
<p style="padding-left: 30px;"><a href="https://cadlab.mde.tw/post/">https://cadlab.mde.tw/post/</a></p>
<p>2017</p>
<p style="padding-left: 30px;"><a href="https://s40523144.github.io/2017springwcm_hw/blog/2017spring-mde-wcm.html">https://s40523144.github.io/2017springwcm_hw/blog/2017spring-mde-wcm.html</a></p>
<p>2018</p>
<p style="padding-left: 30px;"><a href="https://github.com/scrum-3/wcms-scrum3">https://github.com/scrum-3/wcms-scrum3</a></p>
<p>2019</p>
<p style="padding-left: 30px;"><a href="https://github.com/50733143/50733143.github.io">https://github.com/50733143/50733143.github.io</a></p>
<p style="padding-left: 30px;"><a href="https://www.youtube.com/watch?v=lPJGzHdpIOw">https://www.youtube.com/watch?v=lPJGzHdpIOw</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/scrum-1/wcm2019">https://github.com/scrum-1/wcm2019</a></p>
<p style="padding-left: 30px;"><a href="https://scrum-1.github.io/wcm2019">https://scrum-1.github.io/wcm2019</a></p>
<p>2020</p>
<p style="padding-left: 30px;"><a href="https://gitter.im/mdecourse/wcm2020">https://gitter.im/mdecourse/wcm2020</a></p>
<p style="padding-left: 30px;"><a href="https://50833106.github.io/wcmj2020">https://50833106.github.io/wcmj2020</a></p>
<p>2021</p>
<p style="padding-left: 30px;"><a href="https://gitter.im/mdecourse/wcm2021">https://gitter.im/mdecourse/wcm2021</a></p>
<p>2022</p>
<p style="padding-left: 30px;"><a href="https://gitter.im/mdecourse/wcm2022">https://gitter.im/mdecourse/wcm2022</a></p>
<p style="padding-left: 30px;"><a href="http://wcm.cycu.org:88/github/wcm2022_guide">http://wcm.cycu.org:88/github/wcm2022_guide</a> (for @nfu users only)</p>
<p style="padding-left: 30px;"><a href="https://gmnfuedutw-my.sharepoint.com/:v:/g/personal/yen_gm_nfu_edu_tw/Ed28wq2Xd0VLrm1SKZy78LkB_rk0rF2lqCxTJDWsQ6qqUQ?e=bY4ODu">wcm2022_1a_w13_part1.mp4</a> (29:06 Brython 環境, 在 Tetris 遊戲加入計分系統)</p>
<p style="padding-left: 30px;"><a href="https://gmnfuedutw-my.sharepoint.com/:v:/g/personal/yen_gm_nfu_edu_tw/EaLwVno77RVAgiw8yRIDVLwBjIE4bzMhKPtLAKB5wgStVA?e=GpgcBf">wcm2022_1a_w13_part2.mp4</a> (18:26 Brython 基本程式與 Canvas 2D 動態繪圖程式編寫)</p>
<p style="padding-left: 30px;"><a href="https://gmnfuedutw-my.sharepoint.com/:v:/g/personal/yen_gm_nfu_edu_tw/ESyTyRWxM7pOqzcJzTpxVywB2bfdpWGmVA9MI9BHSPLlVg?e=5fHAUK">wcm2022_5j_w13_part1.mp4</a> (29:25 cmsimde 維護與 Brython 靜態繪圖 (國旗) 介紹)</p>
<p style="padding-left: 30px;"><a href="https://gmnfuedutw-my.sharepoint.com/:v:/g/personal/yen_gm_nfu_edu_tw/EQDCJ3GeZIZDhO2XaZ9PfUUBxyiWsUwU3ODUQEUdSdCY4Q?e=U0h858">wcm2022_5j_w13_part2.mp4</a> (44:17 Brython 環境設置與 html5 Canvas 介紹)</p>
<p style="padding-left: 30px;"><a href="https://gmnfuedutw-my.sharepoint.com/:v:/g/personal/yen_gm_nfu_edu_tw/Ef7p826Hjj9JtZLFLq8nKKAB37rtXpYXHtLxRKO4nAefCw?e=2vJMeN">wcm2022_1a_w14.mp4</a> (15:10 Brython 程式編寫)</p>
<p style="padding-left: 30px;"><a href="https://gmnfuedutw-my.sharepoint.com/:v:/g/personal/yen_gm_nfu_edu_tw/EXzZbfWiBwxItzGllhkndbkBJq6naTQZHhJW68P9FLraWw?e=BGhAqW">wcm2022_5j_w14.mp4</a> (25:45 Leo Editor 與線上 2D 繪圖編寫)</p>
<p style="padding-left: 30px;"><a href="https://gmnfuedutw-my.sharepoint.com/:v:/g/personal/yen_gm_nfu_edu_tw/EVtsGFmKL55DqA98ZPAd2x4BuqjIMKckTgPA5U-hUwqUSg?e=ERGpOb">wcm2022_5j_w16.mp4</a> (37:21 Tetris Brython 程式介紹)</p>
<p style="padding-left: 30px;"><a href="https://classroom.github.com/classrooms/112770776-2022-fall-classroom/assignments/site">cp2022 計算機程式 site</a></p>
<p style="padding-left: 30px;"><a href="https://classroom.github.com/classrooms/112770799-2022-fall-classroom/assignments/site">cad2022 電腦輔助設計與實習 site</a></p>
<p style="padding-left: 30px;">下載 <a href="https://software.nfu.edu.tw/Windows/tw/Win10_21H2.9_64BIT_CH.ISO">Win10_21H2.9_64BIT_CH.ISO</a> (5.5GB for @nfu users only) (<a href="https://software.nfu.edu.tw/KMS/windows_kms.bat">KMS</a>)</p>
<p style="padding-left: 30px;">下載 <a href="https://software.nfu.edu.tw/Office/tw/Office_Pro_Plus_2016_64Ch.iso">Office_Pro_Plus_2016_64Ch.iso</a> (964MB for @nfu users only) (<a href="https://software.nfu.edu.tw/KMS/Office_2016_KMS.bat">KMS</a>)</p>
<p style="padding-left: 30px;">行列輸入法:</p>
<p style="padding-left: 60px;"><a href="https://array30.misterfishup.com/tutorial-complete.html">https://array30.misterfishup.com/tutorial-complete.html</a></p>
<p style="padding-left: 90px;"><a href="https://github.com/MisterFISHUP/fish-up-dictionary-of-array">https://github.com/MisterFISHUP/fish-up-dictionary-of-array</a> </p>
<p style="padding-left: 60px;"><a href="https://archer1609wp.wordpress.com/2015/02/22/%E5%86%B7%E9%96%80%E4%BD%86%E5%A5%BD%E5%AD%B8%E5%A5%BD%E7%94%A8-%E8%A1%8C%E5%88%97%E8%BC%B8%E5%85%A5%E6%B3%95%E9%80%9F%E6%8E%A2/">行列輸入法速探</a></p>
<p style="padding-left: 60px;"><a href="https://youtu.be/xNZkMPNi_Qk">https://youtu.be/xNZkMPNi_Qk</a> </p>
<h2>jitsi</h2>
<p><a href="https://jitsi.org/">https://jitsi.org/</a> </p>
<h2>Git</h2>
<p><a href="https://www.atlassian.com/git/tutorials/what-is-version-control">https://www.atlassian.com/git/tutorials/what-is-version-control</a></p>
<p>git 是一種<span style="background-color: #ffff00;">分散式版次管理系統工具</span>, 可讓使用者在多人協同執行專案的過程中, <span style="background-color: #ffff00;">追蹤儲存在倉儲中特定文件的改版歷程</span>. 此外, 採用 git 在團隊間執行專案文件管理, 可協助各成員以<span style="background-color: #ffff00;">同步方式執行專案</span>. 任一成員可以在<span style="background-color: #ffff00;">各自的改版分支</span>中<span style="background-color: #ffff00;">進行各種測試</span>後, 再決定是否要將改版內容<span style="background-color: #ffff00;">合併到主要的團隊版本分支</span>中.</p>
<p>前述所謂分散式的意思是, 各參與協同人員可以在近端(git server 以外的電腦上)直接進行改版, 而不需要像所謂集中式版次管理系統, 所有成員都必須登入到集中伺服器才能對專案文件進行改版, 因此分散式版次管理系統的改版流程不僅速度快, 且各成員在對資料進行改版提交(commit)時並不需要上網, 只有在推送(push)時才需要從 git client 端聯網到 git server 端(Github 即為一台 web-based git server).</p>
<p>有關 Head detached:</p>
<p>當切到某先前的提交點後, 進行數次的內容改版, 就會出現 HEAD detached 的註記, 表示目前的版本並非指向 main 分支.</p>
<p>這時可以將改版內容進行提交之後, 以 "git branch 分支名稱 版次號" 建立分支, 然後 checkout 至 main 分支後, 再利用 git merge 該分支名稱, 就可以將先前 HEAD detached 之後變更的內容合併至 main 主分支.</p>
<p>合併內容後, 若要刪除位於近端的分支, 可以執行 git branch --delete 分支名稱.</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">demo@tcexam:~/wcm2023$ git branch
* (HEAD detached from 2cc9abd)
  main
demo@tcexam:~/wcm2023$ git add .
demo@tcexam:~/wcm2023$ git commit -m "head detached"
[detached HEAD 7412b5a] head detached
 6 files changed, 19 insertions(+), 19 deletions(-)
 rewrite content/tipuesearch_content.js (99%)
demo@tcexam:~/wcm2023$ git checkout main
Warning: you are leaving 5 commits behind, not connected to
any of your branches:

  7412b5a head detached
  57c222d 紀錄 project.cycu 虛擬伺服器建立流程
  ed4d3a7 add project.cycu server for web-based project git processes
  2f16a5e add Ubuntu page
  308e8a6 add Python 3.11.2 and Python 3.10.8 portable system links

If you want to keep them by creating a new branch, this may be a good time
to do so with:

 git branch &lt;new-branch-name&gt; 7412b5a

Switched to branch 'main'
Your branch is up to date with 'origin/main'.
demo@tcexam:~/wcm2023$ git branch ubuntu 7412b5a
demo@tcexam:~/wcm2023$ git branch
* main
  ubuntu
demo@tcexam:~/wcm2023$ git merge ubuntu</pre>
<p>刪除近端與遠端的倉儲分支:</p>
<p style="padding-left: 30px;">刪除近端分支:</p>
<p style="padding-left: 60px;">git branch -d 近端分支名稱</p>
<p style="padding-left: 30px;">刪除遠端分支:</p>
<p style="padding-left: 60px;">git push origin --delete 遠端分支名稱</p>
<p>提交 (commit) 之前, 希望取消 git add .:</p>
<p style="padding-left: 30px;">git restore --staged .</p>
<p>推送 (push) 之前, 希望取消上一個提交 (commit):</p>
<p style="padding-left: 30px;">git reset HEAD~</p>
<hr/>
<p>有關使用 Putty ssh 執行 git clone 時出現 WARNING - POTENTIAL SECURITY BREACH! 原因是所建立的 session 尚未從連線 server 接收 public key, 導致 git 透過 putty 進行 ssh 遠端登入時採用先前所使用的其他 key pair 的 public key, 因此造成 git 發出所謂 POTENTIAL SECURITY BREACH 的警告.</p>
<p>這時只要從 Putty 帶出要連線的 session, 然後以 Open 進行連線, 這時 github 就會在被要求遠端登入的情況下, 更新 public key cache 內容.</p>
<p>References:</p>
<p style="padding-left: 30px;"><a href="https://opensource.com/life/16/8/how-construct-your-own-git-server-part-6">https://opensource.com/life/16/8/how-construct-your-own-git-server-part-6</a></p><h2>Replit</h2>
<p><a href="https://replit.com/">https://replit.com/</a> (use wcms)</p>
<h2>TCExam</h2>
<p>設定是否讓用戶自行註冊帳號:</p>
<p>tcexam\shared\config\tce_user_registration.php</p>
<p> /* kmol1*/<br/>define('K_USRREG_ENABLED', false);</p>
<hr/>
<p>Bugs:</p>
<p>ATTENTION: [8192] stripos(): Passing null to parameter #1 ($haystack) of type string is deprecated | LINE: 333 | FILE: C:\tcexam\tcexam\shared\code\tce_functions_test_stats.php<br/>ATTENTION: [8192] stripos(): Passing null to parameter #1 ($haystack) of type string is deprecated | LINE: 333 | FILE: C:\tcexam\tcexam\shared\code\tce_functions_test_stats.php</p>
<hr/>
<p>考試結果(json):</p>
<p><a href="/downloads/1a_w5_exam_json.7z">1a_w5_exam_json.7z</a> (嘗試使用 Python 或 Brython 讀取各學員的考試成績)</p>
<p><a href="/downloads/1a_w5_test.7z">1a_w5_test.7z</a> (嘗試利用 Leo Editor 處理 xml 格式, 以工具或程式協助出題) - 相關技術可以用來處理 CoppeliaSim 場景檔案. (Solid Edge 建立零件檔案, 以 STL 轉入 CoppeliaSim)</p><h2>Trends</h2>
<p><a href="https://asmedigitalcollection.asme.org/mechanicaldesign">https://asmedigitalcollection.asme.org/mechanicaldesign</a> </p>
<p><a href="https://asmedigitalcollection.asme.org/mechanicaldesign/article/145/4/040301/1156296/Special-Issue-Emerging-Technologies-and-Methods">https://asmedigitalcollection.asme.org/mechanicaldesign/article/145/4/040301/1156296/Special-Issue-Emerging-Technologies-and-Methods</a> </p>
<p>Remote work:</p>
<p><a href="https://hrmasia.com/github-tells-employees-to-prepare-to-work-from-home-permanently/">https://hrmasia.com/github-tells-employees-to-prepare-to-work-from-home-permanently/</a></p>
<p><a href="https://hrmasia.com/remote-work-leads-to-increased-productivity/">https://hrmasia.com/remote-work-leads-to-increased-productivity/</a></p>
<p>Or not:</p>
<p><a href="https://hrmasia.com/is-remote-work-stymieing-business-innovation/">https://hrmasia.com/is-remote-work-stymieing-business-innovation/</a></p>
<p><a href="https://www.dqindia.com/it-companies-moving-to-work-from-home-permanently-was-a-mistake-says-chatgpt-founder/">https://www.dqindia.com/it-companies-moving-to-work-from-home-permanently-was-a-mistake-says-chatgpt-founder/</a></p>
<p>Flexible work:</p>
<p><a href="https://hrmasia.com/uk-rolls-out-new-initiative-for-flexible-work/">https://hrmasia.com/uk-rolls-out-new-initiative-for-flexible-work/</a></p>
<p>Four-day workweek:</p>
<p><a href="https://hrmasia.com/is-the-uk-ready-to-embrace-the-four-day-workweek/">https://hrmasia.com/is-the-uk-ready-to-embrace-the-four-day-workweek/</a></p>
<p><a href="https://hrmasia.com/most-australians-want-a-four-day-workweek/">https://hrmasia.com/most-australians-want-a-four-day-workweek/</a></p>
<p>To download or to link?</p>
<p><a href="/downloads/111-2網路選課加退選重要事項1111228.pdf">111-2網路選課加退選重要事項1111228.pdf</a> (<a href="https://www.google.com/search?client=firefox-b-d&amp;q=nfu+111%E5%AD%B8%E5%B9%B4%E5%BA%A6%E7%AC%AC2%E5%AD%B8%E6%9C%9F%E7%B6%B2%E8%B7%AF%E5%8A%A0%E9%80%80%E9%81%B8%E9%87%8D%E8%A6%81%E4%BA%8B%E9%A0%85">Google search</a>)</p>
<p>AI:</p>
<p><a href="https://www.dqindia.com/future-of-enterprise-ai-becoming-essential-for-ease-of-living/">https://www.dqindia.com/future-of-enterprise-ai-becoming-essential-for-ease-of-living/</a></p>
<p><a href="https://www.dqindia.com/how-to-unlock-the-power-of-chatgpt/">https://www.dqindia.com/how-to-unlock-the-power-of-chatgpt/</a></p>
<p>Oral history:</p>
<p><a href="https://www-cs-faculty.stanford.edu/~knuth/news20.html">https://www-cs-faculty.stanford.edu/~knuth/news20.html</a></p>
<p><a href="https://conservancy.umn.edu/bitstream/handle/11299/107413/oh332dk.pdf">https://conservancy.umn.edu/bitstream/handle/11299/107413/oh332dk.pdf</a></p>
<p><a href="https://archive.computerhistory.org/resources/access/text/2013/05/102658053-05-01-acc.pdf">https://archive.computerhistory.org/resources/access/text/2013/05/102658053-05-01-acc.pdf</a></p>
<p></p><h1>WCM</h1>
<p><a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EV5lw40RXvNFue1Cr2sivioBuOj_QA5KzAxDMU0Mkf7z8w?e=NtOJeN">wcm_portable_w2-5.7z</a> (下載 220MB 解開後 880MB)</p>
<p><a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EfxPBN4umu1JlOhrosRe32wBbB5g3jUPZUaoRS3PFv7ARA?e=OWe7en">miktex_portable.7z</a> (下載 314MB 解開後 964MB)</p>
<p>納入 Portable MiKTeX 之後的 可攜 Python 程式套件: <a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/Ecr0uG0UzJlBtwpYzztBupUBkUdQsQgmd9PWzfjTZBsB8w?e=zlb42j">wcm_portable_w2-4-miktex.7z</a></p>
<p>Web-based Content Management (網際內容管理) - 利用瀏覽器管理個人網站中的前端與後端內容稱為網際內容管理, 此網際指的是全球資訊網 (World Wide Web, WWW), 其中牽涉全球資訊網前端的程式與內容, 以及全球資訊網後端的程式與內容.</p>
<p>全球資訊網前端指的就是瀏覽器 (Web Browser), 其中首選為 <a href="https://www.mozilla.org/en-US/firefox/">Firefox</a> 與 <a href="https://www.waterfox.net/">Waterfox</a>, 其次為 Windows 環境中的 Edge, 最後若需要第四套瀏覽器, 才使用 Google Chrome. 但在使用 MS Teams 過程, 為了讓 Webcam 與麥克風相容, 則必須使用 Edge 瀏覽器. 至於搜索引擎, 目前仍以 <a href="https://www.google.com">Google Search</a> 最具優勢, 但之後加入 <a href="https://openai.com/blog/chatgpt/">ChatGPT</a> 後的 <a href="https://www.bing.com/new">New Bing</a> 預計將會有長足的進步.</p>
<p>全球資訊網後端址的就是 WWW Server, 本課程所使用的全球資訊網伺服器包括 serve Github Pages 的 Github 全球資訊網伺服器 (個人帳號 加上 github.io), 以及可自行配置安裝的 Nginx, 其次為了配合 Nginx 在 https 協定上的應用, 另外結合 <a href="https://www.stunnel.org/downloads.html">Stunnel</a> 與 <a href="https://letsencrypt.org">Let's Encrypt</a> 服務.</p><h2>五專</h2>
<p><a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EV5lw40RXvNFue1Cr2sivioBuOj_QA5KzAxDMU0Mkf7z8w?e=NtOJeN">wcm_portable_w2-5.7z</a> (下載 220MB 解開後 880MB)</p>
<p><a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EfxPBN4umu1JlOhrosRe32wBbB5g3jUPZUaoRS3PFv7ARA?e=OWe7en">miktex_portable.7z</a> (下載 314MB 解開後 964MB)</p>
<p>納入 Portable MiKTeX 之後的 可攜 Python 程式套件: <a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/Ecr0uG0UzJlBtwpYzztBupUBkUdQsQgmd9PWzfjTZBsB8w?e=zlb42j">wcm_portable_w2-4-miktex.7z</a></p>
<p>上課時段: 週五, 09:10 – 12:00</p>
<p>w18 放假.</p>
<p>網際內容管理 - Web-based Content Management</p>
<p>課程目標:</p>
<p style="padding-left: 60px;">透過 web-based 介面將資料送到雲端主機. (OneDrive, Github)</p>
<p style="padding-left: 60px;">電腦軟硬體、伺服器與虛擬主機架構介紹. (PC Hardware, Virtualbox)</p>
<p>請問:</p>
<p style="padding-left: 30px;">您對電腦的了解有多少? 請整理與下列議題相關的內容, 並將資料放入個人的倉儲與網頁中.</p>
<p style="padding-left: 60px;">請檢查一下與你現在用的這一台電腦有關的硬體與軟體資訊, 能把它拆開來看個仔細嗎?</p>
<p style="padding-left: 90px;">主機板型號與規格, 支援 BIOS? 支援 UEFI? 什麼是 BIOS?  什麼是 UEFI?</p>
<p style="padding-left: 90px;">電源供應器型號與規格</p>
<p style="padding-left: 90px;">中央處理器型號與規格</p>
<p style="padding-left: 90px;">記憶體規格</p>
<p style="padding-left: 90px;">配有水銀電池嗎? 功能是什麼? 電池壽命大概多久?</p>
<p style="padding-left: 90px;">配有固態硬碟嗎? 什麼型號與規格?</p>
<p style="padding-left: 90px;">光碟機型號與規格</p>
<p style="padding-left: 90px;">配有 sata 硬碟嗎? 什麼型號與規格? 硬碟採 MBR 或 GPT 分割? 什麼叫做硬碟分割? 什麼是 MBR? GPT? 硬碟採那種規格格式化? FAT32? NTFS? exFAT?</p>
<p style="padding-left: 90px;">網路卡什麼品牌與規格?</p>
<p style="padding-left: 90px;">防寫卡什麼品牌與規格?</p>
<p style="padding-left: 90px;">操作系統版次?</p>
<p style="padding-left: 90px;">裝了那些軟體? 如何分類?</p>
<p style="padding-left: 90px;">這電腦能列印嗎? 需要列印嗎?</p>
<p style="padding-left: 90px;">這電腦能當伺服器嗎? 什麼是伺服器?</p>
<p style="padding-left: 90px;">這電腦能裝虛擬主機嗎? 什麼是虛擬主機?</p>
<p style="padding-left: 90px;">學校提供哪些教育版的軟體套件?</p>
<p style="padding-left: 90px;">系上提供哪些教育版的軟體套件?</p>
<p style="padding-left: 90px;">哪些公司提供免費的工程用教育版套件?</p>
<p style="padding-left: 90px;">關於這台電腦, 您還想知道什麼?</p>
<p style="padding-left: 60px;">對了, 你們上學期已經修過<span style="background-color: #ffff00;">計算機概論 (Introduction to Computers) </span>了, 而下學期將修<a href="https://mde.tw/2022fall/content/cp.html"><span style="background-color: #ffff00;">計算機程式</span></a><span style="background-color: #ffff00;"> (Computer Programming)</span>,  那麼</p>
<p style="padding-left: 60px;">從<span style="background-color: #ffff00;">計算機概論 -&gt; 網際內容管理 (Web-based Content Management) -&gt; <a href="https://mde.tw/2022fall/content/cp.html">計算機程式</a></span>, 這三門與電腦及網路有關的課程, 到底希望傳達什麼樣的知識?了解這些課程的內涵, 未來到底能用來做什麼?</p>
<p style="padding-left: 60px;">輸入(設定) -&gt; 電腦 + 網路 -&gt; 輸出(結果)</p>
<p style="padding-left: 60px;">電腦 ＋ 網路 可以接受那些輸入, 會產生那些輸出?</p>
<p style="padding-left: 60px;">台大電機系大一<a href="http://ocw.aca.ntu.edu.tw/ntu-ocw/ocw/cou/101S210">計算機概論</a>課程: Introduction to Computer</p>
<p style="padding-left: 90px;">"這是專門設計給電機系一年級同學修習的計算機概論課程，其目的在教授計算機科學的基礎技術及知識。同時亦著重C/C++相關程式設計的技巧。最終希望讓同學有足夠的能力修習進階計算機相關課程，以及利用計算機來解決日後的研究議題。課程內容包括</p>
<p style="padding-left: 90px;">1. 資料類：資料儲存、資料結構、資料庫<br/>2. 系統類：計算機結構，作業系統，網路<br/>3. 科學類：演算法，程式語言，人工智慧"</p>
<p style="padding-left: 90px;">Data Storage<br/>Data Manipulation<br/>Operating Systems<br/>Networking and Internet<br/>Algorithms<br/>Programming Languages<br/>Data Abstractions<br/>Database Systems<br/>Computer 3D Graphics<br/>Artificial Intelligence<br/>Theory of Computation</p>
<p style="padding-left: 60px;">清大資工<a href="https://ocw.nthu.edu.tw/ocw/index.php?page=course&amp;cid=13">計算機網路概論</a>課程</p>
<p style="padding-left: 90px;"><a href="https://www.amazon.com/Computer-Networking-Top-Down-Approach-7th/dp/0133594149">Computer Networking: A Top-Down Approach Featuring the Internet</a></p>
<p style="padding-left: 60px;">交大<a href="http://ocw.nctu.edu.tw/course_detail.php?bgid=0&amp;gid=0&amp;nid=192">計算機概論與程式設計</a>課程: Introduction to Computers and Programming</p>
<p style="padding-left: 90px;"><a href="https://www.amazon.com/Absolute-C-6th-Walter-Savitch/dp/0133970787">Absolute C++</a></p>
<p style="padding-left: 60px;">MIT <a href="https://ocw.mit.edu/courses/6-0001-introduction-to-computer-science-and-programming-in-python-fall-2016/download/">introduction to computer science and programming in Python</a> course</p>
<p style="padding-left: 90px;">Lecture 1: What is Computation?<br/>Lecture 1-0: Understanding Program Efficiency, Part 1<br/>Lecture 1-1: Understanding Program Efficiency, Part 2<br/>Lecture 1-2: Searching and Sorting<br/>Lecture 2: Branching and Iteration<br/>Lecture 3: String Manipulation, Guess and Check, Approximations, Bisection<br/>Lecture 4: Decomposition, Abstraction, and Functions<br/>Lecture 5: Tuples, Lists, Aliasing, Mutability, and Cloning<br/>Lecture 6: Recursion and Dictionaries<br/>Lecture 7: Testing, Debugging, Exceptions, and Assertions</p>
<p style="padding-left: 60px;">Stanford <a href="https://web.stanford.edu/class/cs101/lecture01.html#/">Introduction to Computers</a> course</p>
<p style="padding-left: 90px;"><a href="https://web.stanford.edu/class/cs101/">https://web.stanford.edu/class/cs101/</a></p>
<p style="padding-left: 90px;">For high school: <a href="https://introcomputing.org/">https://introcomputing.org/</a></p>
<p style="padding-left: 60px;">Kenya Anin Girls High <a href="https://peda.net/kenya/ass/subjects2/computer-studies/form-1/itc2">Introduction to Computers</a> course</p>
<p style="padding-left: 30px;">您對網路的了解有多少?</p>
<p style="padding-left: 30px;">學校的新生訓練提到多少與電腦及網路有關的資訊?</p>
<p style="padding-left: 30px;">您對系上的網路系統架構了解多少?</p>
<p style="padding-left: 30px;">我們該花一點時間了解一下當今最紅的 <a href="https://openai.com/blog/chatgpt/">https://openai.com/blog/chatgpt/</a> 嗎?</p>
<hr/>
<p style="padding-left: 30px;">電腦輔助設計室是如何上網的？</p>
<p style="padding-left: 30px;">您的手機使用門號上網與透過電腦輔助設計室 Wifi 上網, 會有哪些差別？</p>
<p style="padding-left: 30px;">電腦上的 Edge, Chrome 與 Firefox 瀏覽器在使用上有哪些差別?</p>
<p style="padding-left: 30px;">網際內容管理中的 Web-based 代表什麼？</p>
<p>請以自己的學號登入 <a href="https://mail.nfu.edu.tw">https://mail.nfu.edu.tw</a></p>
<p>請以自己的英文姓名至 <a href="https://github.com">https://github.com</a> 申請帳號</p>
<p>假如要選擇一項主題作為內容進行管理, 您會選擇什麼主題？</p>
<ol>
<li>利用近端管理個人網站 - 需要能開啟動態網站的 Python 程式環境</li>
<li>利用 Replit 管理個人網站 - 需要建立 Replit 帳號, 並使用 Token 授權維護 Github 倉儲</li>
<li>利用 Stud 伺服器管理個人網站 - 需要 Stud 主機帳號, 內部與外部 port, server.py 以及 acp</li>
<li>利用遠端管理個人網站 - 需要透過 Github Actions 協助集結動態網站內容與轉檔</li>
</ol>
<p>數位教材:</p>
<p style="padding-left: 30px;"><a href="https://nfuedu-my.sharepoint.com/:b:/g/personal/yen_nfu_edu_tw/ET59eCPLupBGgIUmBog-yE0BMkL4RdYWNzpBxW-PzvnX1A?e=RKYWbq">1999 How to be a star engineer</a>, <a href="https://nfuedu-my.sharepoint.com/:b:/g/personal/yen_nfu_edu_tw/EQtBbwaFSKdCrnxljlGU9NMBcl70NO4OghYo5caSpLcvcw?e=E9iyjL">如何成為一位傑出的工程師</a> (for @nfu users only)</p>
<p style="padding-left: 30px;"><a href="https://nfuedu-my.sharepoint.com/:b:/g/personal/yen_nfu_edu_tw/EZzE7rKRQ3ZIvSoavwvZB6gBmupyVpzqRuvH7yO1i0Yj1w?e=h5SBg0">2023 Cloud Computing Technology</a> (for @nfu users only)</p>
<p style="padding-left: 30px;"><a href="https://nfuedu-my.sharepoint.com/:b:/g/personal/yen_nfu_edu_tw/EZpULDm6GfNCsuTiqfloxnYBV1GzC1lG39SjU6ooqLWbyA?e=vuIlOV">2021 Cloud Computing Basics</a> (for @nfu users only)</p><h3>ChatGPT</h3>
<p>納入 Portable MiKTeX 之後的 可攜 Python 程式套件: <a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/Ecr0uG0UzJlBtwpYzztBupUBkUdQsQgmd9PWzfjTZBsB8w?e=zlb42j">wcm_portable_w2-4-miktex.7z</a></p>
<p><a href="https://en.wikipedia.org/wiki/ChatGPT">https://en.wikipedia.org/wiki/ChatGPT</a></p>
<p>Chat Generative Pre-trained Transformer</p>
<p>Generative: 有生成能力的</p>
<p style="padding-left: 30px;">與生成有關的所謂 <a href="https://solidedge.siemens.com/en/tag/generative-design/">Generative Design</a> 可參考 Solid Edge Community Edition 中的模組功能:</p>
<p style="padding-left: 30px;"><a href="https://www.plm.automation.siemens.com/plmapp/education/solid-edge/zh_tw/free-software/community">https://www.plm.automation.siemens.com/plmapp/education/solid-edge/zh_tw/free-software/community</a> (下載約 4GB, 安裝後佔約 8GB, 授權使用時段: 06-jul-2021 至 31-dec-2025)</p>
<p>Pre-trained: 事先訓練過的</p>
<p style="padding-left: 30px;"><a href="https://blogs.nvidia.com/blog/2022/12/08/what-is-a-pretrained-ai-model/">Pre-trained AI model</a></p>
<p>Transformer: 轉換器 - 指具備自注意機制能力 (<a href="https://medium.com/@ZH_Shen/%E8%87%AA%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%A9%9F%E5%88%B6-self-attention-%E6%9D%8E%E5%BC%98%E6%AF%85-ml2021-5-6fb61c4bc320">self-attention</a>), 常用於自然語言處理與影像辨識的深度學習模型</p>
<ol>
<li>is a chatbot</li>
<li>launched by <a href="https://en.wikipedia.org/wiki/OpenAI">https://en.wikipedia.org/wiki/OpenAI</a></li>
<li>built on top of GPT-3 (Generative Pre-trained Transformer 3)</li>
<li>fine tuned by supervised and <a href="https://medium.com/@jockeyng/%E5%BC%B7%E5%8C%96%E5%AD%B8%E7%BF%92-reinforcement-learning-487aef228c04">reinforcement learning</a> techniques</li>
<li>models are trained in collaboration with Microsoft and Azure supercomputing infrastructure</li>
<li>CEO of the OpenAI is <a href="https://en.wikipedia.org/wiki/Sam_Altman">Sam Altman</a> (<a href="https://www.dqindia.com/it-companies-moving-to-work-from-home-permanently-was-a-mistake-says-chatgpt-founder/">view on WFH</a>) who received his first computer at the age of 8</li>
</ol>
<p>Automate tasks using Python: <a href="https://medium.com/geekculture/hey-chatgpt-solve-these-coding-tasks-using-python-b2e7482f2c18">https://medium.com/geekculture/hey-chatgpt-solve-these-coding-tasks-using-python-b2e7482f2c18</a></p>
<p>Learn Python with ChatGPT: <a href="https://thedeveloperspace.com/learn-python-with-chatgpt/">https://thedeveloperspace.com/learn-python-with-chatgpt/</a></p>
<p>Running Python inside ChatGPT: <a href="https://mathspp.com/blog/running-python-inside-chatgpt">https://mathspp.com/blog/running-python-inside-chatgpt</a></p>
<p>Writing a chess program in one hour with ChatGPT: <a href="https://medium.datadriveninvestor.com/writing-a-chess-program-in-one-hour-with-chatgpt-67e7ec56ba5d">https://medium.datadriveninvestor.com/writing-a-chess-program-in-one-hour-with-chatgpt-67e7ec56ba5d</a></p>
<p>Openai 程式碼:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 導入 openai
import openai

# 輸入 api_key
openai.api_key = "your_api_key"

# 每一個電話號碼所登記的帳號, 在三個月內有 $18 可以進行測試 Davinci 0.02/1k token


# 利用 create 建立問答
response = openai.Completion.create(
model="text-davinci-003",
prompt="Write me a short introduction for a precision mechanical engineering major student try to get a job",
max_tokens=512,
temperature=0,
top_p=1,
frequency_penalty=0,
presence_penalty=0
)

# 傳回的 dict 中的 text
output = response["choices"][0]["text"]
print(output)</pre>
<p></p>
<p></p><h3>cadlab</h3>
<p>納入 Portable MiKTeX 之後的 可攜 Python 程式套件: <a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/Ecr0uG0UzJlBtwpYzztBupUBkUdQsQgmd9PWzfjTZBsB8w?e=zlb42j">wcm_portable_w2-4-miktex.7z</a></p>
<p>上網設定:</p>
<p>確定目前使用 IPv4 或 IPv6 上網</p>
<p>若在 IPv4 網路協定下, 可設代理主機多一條網路通道選擇:</p>
<p style="padding-left: 30px;">p4.cycu.org (允許從校外連線, 但需要帳號密碼)</p>
<p style="padding-left: 30px;">p42.cycu.org</p>
<p style="padding-left: 30px;">p69.cycu.org</p>
<p style="padding-left: 30px;">p53.cycu.org</p>
<p>假如 IPv4 網路不穩定或受到蠕蟲攻擊導致網路被防毒軟體強制關閉 (避開攻擊), 則可以嘗試將網路設定為 IPv6 only</p>
<p style="padding-left: 30px;">由於部分網站與網路服務主機, 截至 2023.03.10 仍只支援 IPv4, 這時若希望從純 IPv6 網路連線擷取這些只支援 IPv4 的網站或服務 (例如: <a href="http://www.ntu.edu.tw">http://www.ntu.edu.tw</a> 或 <a href="https://github.com">https://github.com</a>), 則必須設定同時支援 IPv4/IPv6 網路協定的代理主機 (Proxy server 與上述主機符號名稱相同)</p>
<p style="padding-left: 30px;">git 工具使用 https 網路協定時的代理主機設定位於可攜環境啟動後的 home_ipv6, 設定檔案為 .gitconfig, 設定指令為:</p>
<p style="padding-left: 30px;">git config --global http.proxy "http://p4.cycu.org:3128"</p>
<p style="padding-left: 30px;">git 工具使用 ssh 網路協定時的代理主機設定, 在 Windows 可以使用 putty, 透過 session 設定 (可包含欲連線主機, 如 github.com, session 名稱, proxy 與 private key 位置等資訊). 若使用可攜程式, 則需要將 putty 完成的 session 匯出為 .reg 檔案, 以便在隨後可以透過執行該 reg 檔案, 完成所需的 session 設定.</p>
<p style="padding-left: 30px;">git 工具使用 ssh 網路協定時, 若在 Ubuntu, 則必須設置於 .ssh 目錄中的 config 檔案, 其格式如下:</p>
<p></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">Host github.com
User git
Hostname github.com
ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p</pre>
<p><br/><br/></p><h3>5jtopics1</h3>
<p>納入 Portable MiKTeX 之後的 可攜 Python 程式套件: <a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/Ecr0uG0UzJlBtwpYzztBupUBkUdQsQgmd9PWzfjTZBsB8w?e=zlb42j">wcm_portable_w2-4-miktex.7z</a></p>
<p>申請 Onedrive 帳號:</p>
<ol>
<li>先從 <a href="https://mail.nfu.edu.tw">https://mail.nfu.edu.tw</a> 以學號登入 (收取帳號申請確認信).</li>
<li>請各學員至 <a href="https://www.microsoft.com/zh-tw/education/products/office">https://www.microsoft.com/zh-tw/education/products/office</a>, 以 @nfu 帳號申請 OneDrive 帳號.</li>
<li>登入 Teams, 以 sblk6ao Team code 進入 wcm2023 Teams 課程.</li>
</ol>
<p>申請 github 帳號:</p>
<ol>
<li>先從 <a href="https://mail.nfu.edu.tw">https://mail.nfu.edu.tw</a> 以學號登入 (收取帳號申請確認信).</li>
<li>從 <a href="https://github.com/join">https://github.com/join</a> 申請帳號, 可以使用英文姓名(或加上特定數字)作為帳號.</li>
</ol>
<p>主題:</p>
<p style="padding-left: 30px;">利用 Github 儲存資料, 利用虛擬主機學習電腦操作系統安裝與網路配置</p>
<p>建立 Github 帳號:</p>
<p style="padding-left: 30px;">如何選擇帳號名稱?</p>
<p style="padding-left: 30px;">帳號與學號如何對應?</p>
<p style="padding-left: 30px;">透過 <a href="https://classroom.github.com">Github Classroom</a> 取得作業倉儲</p>
<p>目的:</p>
<p style="padding-left: 30px;">整理<a href="https://mde.tw/wcm2023/content/%E4%BA%94%E5%B0%88.html">五專頁面</a>中的所有相關資料</p>
<p>What you get:</p>
<p style="padding-left: 30px;">A repository</p>
<p style="padding-left: 30px;">A Web site (sort of)</p>
<p style="padding-left: 30px;">Virtualbox computer in Windows 10 and Ubuntu 22.04</p>
<p style="padding-left: 30px;">下載 <a href="https://software.nfu.edu.tw/Windows/tw/Win10_21H2.9_64BIT_CH.ISO">Win10_21H2.9_64BIT_CH.ISO</a> (5.5GB for @nfu users only) (<a href="https://software.nfu.edu.tw/KMS/windows_kms.bat">KMS</a>)</p>
<p style="padding-left: 30px;"><a href="https://ubuntu.com/download">下載 Ubuntu</a> ISO (Desktop and Server)</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/wcm2023/content/%E4%BA%94%E5%B0%88.html">五專網際內容管理 PC 相關主題</a></p>
<p>討論:</p>
<p style="padding-left: 30px;"><a href="https://codeburst.io/why-you-should-start-using-github-right-now-e817d213c6ff">Why Github</a>?</p>
<p style="padding-left: 30px;">Why Virtualbox?</p>
<p style="padding-left: 60px;"><a href="https://cadlab.mde.tw/post/virtualbox-de-ying-yong-yu-wang-lu-she-ding-er.html">Virtualbox 的應用與網路設定</a> (一台虛擬電腦可支援安裝 36 片虛擬網路卡)</p>
<p style="padding-left: 30px;">Why assignment repository from <a href="https://classroom.github.com">Github Classroom</a>?</p>
<p style="padding-left: 60px;">先前開放的 <a href="https://github.com/education/classroom">Github Classroom 原始碼</a>, 03.13.2020 之後 Github Classroom 原始碼不再公開, 轉為內部程式開發專案.</p>
<p style="padding-left: 60px;"><a href="https://stackoverflow.com/questions/56577184/github-pull-changes-from-a-template-repository">https://stackoverflow.com/questions/56577184/github-pull-changes-from-a-template-repository</a></p>
<p>參考:</p>
<p style="padding-left: 30px;">納入 Portable MiKTeX 之後的 可攜 Python 程式套件: <a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/Ecr0uG0UzJlBtwpYzztBupUBkUdQsQgmd9PWzfjTZBsB8w?e=zlb42j">wcm_portable_w2-4-miktex.7z</a></p>
<p style="padding-left: 30px;"><a href="https://youtu.be/PNEM7CH3ZAg">為什麼要學 Git?</a> <a href="https://www.sourcetreeapp.com/">https://www.sourcetreeapp.com/</a></p>
<p style="padding-left: 30px;"><a href="https://youtu.be/Zd5jSDRjWfA">Learn Git and Github in 15 分鐘</a></p>
<p style="padding-left: 30px;"><a href="https://git-scm.com/book/zh-tw/v2">Pro Git 電子書繁體中文版</a></p>
<p style="padding-left: 30px;"><a href="https://backlog.com/git-tutorial/tw/">連猴子都能懂的 Git 入門指南</a></p><h3>建立網站</h3>
<p>原理說明:</p>
<p style="padding-left: 30px;">這裡主要是利用 Github 所提供的 Pages 服務, <span style="background-color: #ffff00;">將倉儲的內容轉為全球資訊網站</span>, 由於 WWW 網站的內容主要由 html (超文件), Javascript, css, 文件檔案(.pdf, .txt, .7z 等)與多媒體檔案(jpg, png, gif, mp4 等)所組成. 因此所謂建立網站, 就是在倉儲中設法放入能夠直接由瀏覽器擷取的超文件內容, 其中包含如何導入各種文字, 圖檔與連結.</p>
<p style="padding-left: 30px;">Github 倉儲的擁有者, 若採用手動方式直接在倉儲中建立網站的 html, 並設定該倉儲的 Pages 頁面, 選擇特定分支(branch)作為網站的根目錄(root directory), 當 Github 擁有者對倉儲內容改版後, Github 就會透過 Actions 中的內建轉檔程式, 檢查倉儲內容是否能夠轉為網站, 若轉檔成功, 就會部署到特定的虛擬主機, 直接啟動網站(靜態).</p>
<p style="padding-left: 30px;">為了提升網站內容管理效率, 本課程利用 cmsimde 協助利用 Github 倉儲建立網站.</p>
<p>納入 Portable MiKTeX 之後的 可攜 Python 程式套件: <a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/Ecr0uG0UzJlBtwpYzztBupUBkUdQsQgmd9PWzfjTZBsB8w?e=zlb42j">wcm_portable_w2-4-miktex.7z</a></p>
<p>在 <a href="https://github.com/mdewcm2023/site-wu51133118">https://github.com/mdewcm2023/site-wu51133118</a> 納入 <a href="https://github.com/mdecycu/cmsimde">https://github.com/mdecycu/cmsimde</a>, 並利用 Github Pages 建立網站.</p>
<ol>
<li>登入 github 帳號後, 進入個人的 site-帳號倉儲 (<a href="https://github.com/mdewcm2023/site-">https://github.com/mdewcm2023/site-</a>) 設定 Github Pages</li>
<li>先將個人倉儲, 以 git clone 取到近端, 同時取下 cmsimde</li>
<li>取 cmsimde-master.zip 後解開壓縮然後將目錄改名為 cmsimde 放入倉儲, 並將 up_dir 中的資料複製一份到倉儲的根目錄</li>
<li>在命令列進入倉儲後,  就可以用 cms  執行動態網站, 內建密碼 admin 登入後, 利用 config 修改標題</li>
<li>動態網頁完成改版後, 以 generate_pages 轉為靜態後, 以 acp 透過 token 修改 .git 中的 url 後送到 github.com</li>
</ol>
<p>上述流程的<a href="https://nfuedu-my.sharepoint.com/:v:/g/personal/yen_nfu_edu_tw/EYnpyRciavBGhbl_jN6OulMBTxVlLEfoRXEqGCfB382cnQ?e=dcpXFc">操作影片</a></p>
<p><a href="https://nfuedu-my.sharepoint.com/:v:/g/personal/yen_nfu_edu_tw/EeiCfmcwh2RDhGEZ_YAklqAB0LI7aOy6TEU6fOQkr-z0ng?e=qYRUCy">五專說明如何將 site 倉儲轉為網站.mp4</a></p>
<p>取得 putty 作為工具:</p>
<p><a href="https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html">https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html</a> 下載 putty-64bit-0.78-installer.msi 檔案.</p>
<ol>
<li>可以直接在電腦安裝 putty-64bit-0.78-installer.msi 後, 將 c:\program files\putty 取下, 放到隨身碟的 data 目錄.</li>
<li>也可以利用 <a href="https://github.com/Bioruebe/UniExtract2/releases/download/v2.0.0-rc.3/UniExtractRC3.zip">uniextract</a> 直接解開 putty-64bit-0.78-installer.msi, 取得 putty.</li>
</ol>
<p>維護近端網站的兩種方式:</p>
<p>https (secure hypertext transmit protocol) - 必須透過 token - .git/config URL (Uniform Resource Locator, 泛指網址)</p>
<p>http 是採用廣播(Broadcasting)方式傳訊, 但 https 是編碼 (public/private keys) 後進行傳輸.</p>
<p>SSH - Secure Shell 協定 - 可 remote login (遠端登入)</p>
<p>Putty - 一種可以執行 ssh 協定的工具 (<a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EdlmK0apQEpNgJqgYRbpce4BOgfxfgY95mHLlMy21HB5FQ?e=5fu2rL">下載 0.78 版的 putty.7z</a>)</p>
<p>維護倉儲, 希望採用 SSH 的協定進行維護, 在 Windows 操作系統可以利用 Putty 工具中的 puttygen.exe 建立 OpenSSH 格式的 public key (可視為鎖頭), 必須要登錄到 Github 個人帳號設定中的 SSH and GPG keys 頁面中. 並將 Putty 格式的 private key(副檔名為 .ppk, 表示為 putty 格式的 private key).</p>
<h4>參考資料:</h4>
<p style="padding-left: 30px;"><a href="https://kinsta.com/blog/github-pages/">https://kinsta.com/blog/github-pages/</a> </p>
<p style="padding-left: 30px;"><a href="https://kinsta.com/blog/generate-ssh-key/">https://kinsta.com/blog/generate-ssh-key/</a> </p>
<p style="padding-left: 30px;"><a href="https://www.uio.no/studier/emner/matnat/ifi/IN5320/h18/assignments/git-with-ssh.pdf">https://www.uio.no/studier/emner/matnat/ifi/IN5320/h18/assignments/git-with-ssh.pdf</a> </p><h3>5jexam</h3>
<p>xml 格式的 TCExam 考試題目範例:</p>
<p style="padding-left: 30px;"><a href="/downloads/tcexam_5j_w1-w5_test1.7z">tcexam_5j_w1-w5_test1.7z</a></p><h3>PGP</h3>
<p><a href="https://zh.wikipedia.org/zh-tw/PGP">https://zh.wikipedia.org/zh-tw/PGP</a></p>
<p><a href="https://gnupg.org/download/index.html">https://gnupg.org/download/index.html</a></p><h2>jw2</h2>
<p>納入 Portable MiKTeX 之後的 可攜 Python 程式套件: <a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/Ecr0uG0UzJlBtwpYzztBupUBkUdQsQgmd9PWzfjTZBsB8w?e=zlb42j">wcm_portable_w2-4-miktex.7z</a></p>
<p><a href="/downloads/wcm_5j_w2_note.txt">wcm_5j_w2_note.txt</a></p>
<p><a href="https://www-eefocus-com.translate.goog/article/349129.html?_x_tr_sl=auto&amp;_x_tr_tl=zh-TW">河南開開特星光鎖系統有限公司</a></p>
<p><a href="https://community-dieselschrauber-org.translate.goog/?_x_tr_sl=auto&amp;_x_tr_tl=en">Auto community forum</a></p>
<p><img alt="" height="342" src="/images/vw_golf_mk5_door_lock.jpg" width="400"/></p>
<p><a href="https://www.youtube.com/watch?v=mTXfHE6zdpY">https://www.youtube.com/watch?v=mTXfHE6zdpY</a></p>
<p><a href="https://www.youtube.com/watch?v=z5dtdyDDgrw">https://www.youtube.com/watch?v=z5dtdyDDgrw</a></p>
<p><a href="https://www.youtube.com/watch?v=8mAWPpSLQrY">https://www.youtube.com/watch?v=8mAWPpSLQrY</a></p>
<p><a href="https://www.youtube.com/watch?v=E--jvEVoCNI">https://www.youtube.com/watch?v=E--jvEVoCNI</a></p>
<p><a href="https://www.youtube.com/watch?v=huYLJHGRCYI">https://www.youtube.com/watch?v=huYLJHGRCYI</a></p>
<p><a href="https://www.youtube.com/watch?v=hA_igZnCBPY&amp;t=2s">https://www.youtube.com/watch?v=hA_igZnCBPY&amp;t=2s</a></p>
<p><a href="https://www.youtube.com/watch?v=-XdoDX6H5uU">https://www.youtube.com/watch?v=-XdoDX6H5uU</a></p>
<p><a href="https://www.youtube.com/watch?v=cAYs3O61fl8">https://www.youtube.com/watch?v=cAYs3O61fl8</a></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p><a href="https://www.kiekert.com/">https://www.kiekert.com/</a> </p><h2>四技</h2>
<p><a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EV5lw40RXvNFue1Cr2sivioBuOj_QA5KzAxDMU0Mkf7z8w?e=NtOJeN">wcm_portable_w2-5.7z</a> (下載 220MB 解開後 880MB)</p>
<p><a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EfxPBN4umu1JlOhrosRe32wBbB5g3jUPZUaoRS3PFv7ARA?e=OWe7en">miktex_portable.7z</a> (下載 314MB 解開後 964MB)</p>
<p>納入 Portable MiKTeX 之後的 可攜 Python 程式套件: <a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/Ecr0uG0UzJlBtwpYzztBupUBkUdQsQgmd9PWzfjTZBsB8w?e=zlb42j">wcm_portable_w2-4-miktex.7z</a></p>
<p>上課時段: <span class="event-when">週一, 13:20 – 16:10</span></p>
<p>w2 and w7 調整放假.</p>
<p><span style="background-color: #ffff00;">w2 (2/27, 星期一) 課程將在 3/2 (星期四) 第十至第十二堂補課 (18:30 - 20:55)</span></p>
<p><span style="background-color: #ffff00;">w7 (4/3, 星期一) 課程將在 4/13 (星期四) 第十至第十二堂補課 (18:30 - 20:55)</span></p>
<p>課程目標:</p>
<p style="padding-left: 30px;">Web-based program development - 網際應用程式開發</p>
<p>數位參考教材:</p>
<p style="padding-left: 30px;"><a href="https://nfuedu-my.sharepoint.com/:b:/g/personal/yen_nfu_edu_tw/ET59eCPLupBGgIUmBog-yE0BMkL4RdYWNzpBxW-PzvnX1A?e=RKYWbq">1999 How to be a star engineer</a>, <a href="https://nfuedu-my.sharepoint.com/:b:/g/personal/yen_nfu_edu_tw/EQtBbwaFSKdCrnxljlGU9NMBcl70NO4OghYo5caSpLcvcw?e=E9iyjL">如何成為一位傑出的工程師</a> (for @nfu users only)</p>
<p style="padding-left: 30px;"><a href="https://nfuedu-my.sharepoint.com/:b:/g/personal/yen_nfu_edu_tw/EZzE7rKRQ3ZIvSoavwvZB6gBmupyVpzqRuvH7yO1i0Yj1w?e=h5SBg0">2023 Cloud Computing Technology</a> (for @nfu users only)</p>
<p style="padding-left: 30px;"><a href="https://nfuedu-my.sharepoint.com/:b:/g/personal/yen_nfu_edu_tw/EZpULDm6GfNCsuTiqfloxnYBV1GzC1lG39SjU6ooqLWbyA?e=vuIlOV">2021 Cloud Computing Basics</a> (for @nfu users only)</p>
<p>三種選擇:</p>
<p>1. 用來研究 Streamlit? (快速建立 Web-based 應用程式, 著眼於 data science 與 Machine Learning)</p>
<p style="padding-left: 30px;"><a href="https://nfuedu-my.sharepoint.com/:b:/g/personal/yen_nfu_edu_tw/EdBrqxY0LetMvE3_eDgXI2AB19x2ES8byteUrzz7uI3Kyg?e=eHvmx3">2023 Beginner’s Guide to Streamlit with Python</a> (for @nfu users only)</p>
<p style="padding-left: 60px;"><a href="https://streamlit.io">https://streamlit.io</a></p>
<p style="padding-left: 30px;"><a href="https://nfuedu-my.sharepoint.com/:b:/g/personal/yen_nfu_edu_tw/EWOCmilOKM5GncPk82VFsFEBtEwDjvUvXry38NUVUSGiGQ?e=Xa4s3n">2023 Productionizing AI</a> (for @nfu users only)</p>
<p>2. 或者研究 Reeborg? (深入了解中型 Python 網際程式開發)</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/wcm2023/content/Reeborg">https://mde.tw/wcm2023/content/Reeborg</a></p>
<p>3. 或者繼續 Old School Study, 從 cmsimde 研究起, 或修改 cmsimde, 令其更適合手機使用？ (深入了解小型 Python 網際程式開發)</p>
<p>4. 或者<span style="background-color: #ffff00;">一組三個人, 每人研究上述一項技術的內涵與應用</span>.</p>
<p>Web-based 應用程式都需要部署, 也就是需要一台電腦 (可稱為 server) 用來配置網際程式後端, 而使用者連結至 server 後, 會將 html + css + Javascript (Brython) 下載至客戶端 (Web Browser) 後執行.</p>
<p>而這一台電腦, 可以是 Windows based, Ubuntu based 或 MacOS based. 我們在上學期所使用的 Replit 與自行建構的 stud server, 就是用來配置網際伺服程式.</p>
<p>假如你有一台 Ram 達到 16GB 以上的電腦, 就能自行配置上述三種不同類型的應用程式.</p>
<p>假如你沒有足夠配備的電腦, 或許可以利用工作站室中的一台虛擬主機讓您學習如何配置網際伺服器與應用程式.</p>
<p>管理個人網站方法:</p>
<ol>
<li>利用近端管理個人網站 - 需要能開啟動態網站的 Python 程式環境</li>
<li>利用 Replit 管理個人網站 - 需要建立 Replit 帳號, 並使用 Token 授權維護 Github 倉儲</li>
<li>利用 Stud 伺服器管理個人網站 - 需要 Stud 主機帳號, 內部與外部 port, server.py 以及 acp</li>
<li>利用遠端管理個人網站 - 需要透過 Github Actions 協助集結動態網站內容與轉檔</li>
</ol><h3>行前準備</h3>
<p><a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EV5lw40RXvNFue1Cr2sivioBuOj_QA5KzAxDMU0Mkf7z8w?e=NtOJeN">wcm_portable_w2-5.7z</a> (下載 220MB 解開後 880MB)</p>
<p><a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EfxPBN4umu1JlOhrosRe32wBbB5g3jUPZUaoRS3PFv7ARA?e=OWe7en">miktex_portable.7z</a> (下載 314MB 解開後 964MB)</p>
<p>納入 Portable MiKTeX 之後的 可攜 Python 程式套件: <a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/Ecr0uG0UzJlBtwpYzztBupUBkUdQsQgmd9PWzfjTZBsB8w?e=zlb42j">wcm_portable_w2-4-miktex.7z</a></p>
<h4>帳號申請</h4>
<p>申請 Onedrive 帳號:</p>
<ol>
<li>先從 <a href="https://mail.nfu.edu.tw">https://mail.nfu.edu.tw</a> 以學號登入 (收取帳號申請確認信).</li>
<li>請各學員至 <a href="https://www.microsoft.com/zh-tw/education/products/office">https://www.microsoft.com/zh-tw/education/products/office</a>, 以 @nfu 帳號申請 OneDrive 帳號.</li>
<li>登入 Teams, 以 sblk6ao Team code 進入 wcm2023 Teams 課程.</li>
</ol>
<p>申請 github 帳號:</p>
<ol>
<li>先從 <a href="https://mail.nfu.edu.tw">https://mail.nfu.edu.tw</a> 以學號登入 (收取帳號申請確認信).</li>
<li>從 <a href="https://github.com/join">https://github.com/join</a> 申請帳號, 可以使用英文姓名(或加上特定數字)作為帳號.</li>
</ol>
<p>下載可攜套件:</p>
<ol>
<li>準備一個 USB 3.0 隨身碟.</li>
<li>自行製作 Python 可攜程式環境. (下載 <a href="/downloads/start_stop_batch_files.7z">start_stop_batch_files.7z</a>)</li>
<li><a href="https://steam.oxxostudio.tw/category/python/example/openai.html">安裝 OpenAPI 套件</a>, 並且<a href="https://beta.openai.com/account/api-keys">申請 api key,</a> 每一個手機門號只能取得第一個登錄帳號下的 $18 免費使用, 且必須在三個月內用完. 其中使用 Davinci  模型每 1k token 收費 $0.02. 練習執行下列範例後, 就可以準備轉系了:-)</li>
<li><a href="https://en.wikipedia.org/wiki/Sundar_Pichai">修但幾勒</a>！(Google 目前 CEO 大學唸機械領域中的冶金工程系......)</li>
</ol>
<p>OpenAI Python API 程式範例:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 導入 openai
import openai

# 輸入 api_key
openai.api_key = "your_key"

# 三個月內有 $18 可以進行測試 Davinci 0.02/1k token


# 利用 create 建立問答
response = openai.Completion.create(
model="text-davinci-003",
prompt="請列出不要讀機械設計系的 5 個理由",
max_tokens=256,
temperature=0,
top_p=1,
frequency_penalty=0,
presence_penalty=0
)

# 傳回的 dict 中的 text
output = response["choices"][0]["text"]
print(output)

"""
1. 機械設計系的課程複雜，學習負擔大。
2. 機械設計系的就業前景不明朗。
3. 機械設計系的課程需要花費大量時間在實驗室中。
4. 機械設計系的課程需要掌握大量的專業知識。
5. 機械設計系的課程需要掌握大量的計算機軟件。
"""</pre>
<p>我們已經知道 Google 目前的 CEO 大學並非唸電腦系, 而是<a href="https://www.britannica.com/biography/Sundar-Pichai">唸材料科學系</a>, 於是故意問 ChatGPT:</p>
<p style="padding-left: 30px;">詢問 ChatGPT:</p>
<p style="padding-left: 60px;">Google 現在的 CEO 為什麼大學不是念電腦系</p>
<p style="padding-left: 30px;">ChatGPT 的回答:</p>
<p style="padding-left: 60px;">Google 的 CEO 目前是 Sundar Pichai，他沒有念電腦系，而是念了工程學系。他的學歷是在印度的 IIT Kharagpur 大學，主修<span style="background-color: #ffff00;">電機工程學</span>。他的學術背景使他能夠對科技和工程有深入的了解，也使他能夠更好地管理 Google 的技術團隊。</p>
<p style="padding-left: 30px;">結論: AI 跟人一樣, 即使遍讀全球資訊網路上的所有資訊, 加上孜孜不倦地強化學習與回授篩選運算, 有時還是會犯錯. 難怪孟子會說: <a href="https://dict.revised.moe.edu.tw/dictView.jsp?ID=94978">盡信書, 不如無書</a>!</p>
<p>gen_portable_python.py</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import urllib.request
import os

# basic files for Python installation
py_list = ["core", "dev", "exe", "lib", "tcltk", "tools"]
# Python version
version = "3.11.2"
# Python msi download URL
ftp = "https://www.python.org/ftp/python/" + version + "/amd64/"
# location for Portable Python
path = "C:\\tmp\\python311\\data\\Python311"
# create directory
try:
    os.mkdir(path)
except:
    # path exists
    pass
# get Python installation msi files and extract into target dir
for i in py_list:
    filename = i + ".msi"
    url = ftp + filename
    # download basic python msi file
    urllib.request.urlretrieve(url, filename)
    os.system("msiexec.exe /a " + i + ".msi targetdir=" + path)
    # delete msi file
    os.remove(path + "\\" + i + ".msi")</pre>
<p>start_ipv6.bat</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">@echo off
set Disk=y
subst %Disk%: "data"

%Disk%:

set HomePath=%Disk%:\home_ipv6
set HomeDrive=%Disk%:\home_ipv6
set Home=%Disk%:\home_ipv6
set USERPROFILE=%Disk%:\home_ipv6

REM 將系統 Python 程式的 io 設為 utf-8
set PYTHONIOENCODING="utf-8"

set PYTHONPATH=%Disk%:\Python311\DLLs;%Disk%:\Python311\Lib;%Disk%:\Python311\Lib\site-packages;
set PYTHONHOME=%Disk%:\Python311

REM for putty
set GIT_SSH=%Disk%:\putty\plink.exe

REM 設定跟 Python 有關的命令搜尋路徑
set path_python=%Disk%:\Python311;%Disk%:\Python311\Scripts;
REM 設定跟Git 有關的命令搜尋路徑
set path_git=%Disk%:\portablegit_2.31.1\bin;
set path_tcc=%Disk%:\tcc;
set path_gnuplot=%Disk%:\gnuplot\bin;
REM for execute scite directly
set path_scite=%Disk%:\wscite521;

path=%Disk%:;%path_python%;%path_git%;%path_tcc%;%path_gnuplot%;%path_scite%;%path%;

start /MIN cmd.exe
start /MIN cmd.exe
start /MIN cmd.exe
start /MIN cmd.exe

start /MIN %Disk%:\wscite521\SciTE.exe
start /MIN %Disk%:\wscite521\SciTE.exe


Exit
</pre>
<p>stop.bat</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">@echo off
set Disk=y
path=%PATH%;

taskkill /IM python.exe /F
taskkill /IM pythonw.exe /F
taskkill /IM scite.exe /F

REM 終止虛擬硬碟與目錄的對應
subst %Disk%: /D
REM 關閉 cmd 指令視窗
taskkill /IM cmd.exe /F

EXIT</pre><h3>w2-w6</h3>
<p><a href="https://nfuedu-my.sharepoint.com/:v:/g/personal/yen_nfu_edu_tw/EWHmUoI6S_lGt9l6lr1rAigB7OyGECvBqca2XvF9fxymZw?e=1OC1YL">w6 利用下列第五版可攜程式從倉儲建立網站.mp4</a></p>
<p><a href="https://nfuedu-my.sharepoint.com/:v:/g/personal/yen_nfu_edu_tw/EegNjb-jkRFNoKJf2dD3MQEBkrJplqtKK9g0er-DktDODg?e=IetGT3">w6 利用 token 進行改版 git push.mp4</a></p>
<p><a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EV5lw40RXvNFue1Cr2sivioBuOj_QA5KzAxDMU0Mkf7z8w?e=NtOJeN">wcm_portable_w2-5.7z</a> (下載 220MB 解開後 880MB)</p>
<p><a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EfxPBN4umu1JlOhrosRe32wBbB5g3jUPZUaoRS3PFv7ARA?e=OWe7en">miktex_portable.7z</a> (下載 314MB 解開後 964MB)</p>
<p>納入 Portable MiKTeX 之後的 可攜 Python 程式套件: <a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/Ecr0uG0UzJlBtwpYzztBupUBkUdQsQgmd9PWzfjTZBsB8w?e=zlb42j">wcm_portable_w2-4-miktex.7z</a></p>
<p>電腦輔助機械設計套件 - <a href="https://solidedge.siemens.com/en/solutions/users/hobbyists-and-makers/">community 版 Siemens Solid Edge</a> - <a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/Ef9XW25wCPtCspWavfXRQkYBKeFkOnZDfMyA3Q-1DRhDNA?e=grfmFo">可攜版下載</a> (建議在有還原卡或虛擬主機中使用, for @nfu users only)</p>
<hr/>
<p><a href="https://nfuedu.sharepoint.com/:v:/s/wcm2023/EVdigN-bvp9BoLQnMBJHW_QBvYjTxSiiAF4FYvenXUYtUQ?e=Tcj4rN">說明如何建立可攜 Python 第一步.mp4</a> (Python, SciTE, pip)</p>
<p><a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EaCCYSDwemdEgl_YUiwNglEByPmHyHFW9CboFFS7ao1hLw?e=seZeSo">wcm_portable_w2-1.7z</a></p>
<p>為了執行 cmsimde, 需要安裝以下模組:</p>
<p style="padding-left: 30px;">pip install flask flask_cors bs4 lxml pelican markdown leo pyopenssl</p>
<p>為了使用 git, 必須下載 portablegit:</p>
<p style="padding-left: 30px;"><a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a>  (取得 portable)</p>
<p style="padding-left: 30px;"><a href="https://git-scm.com/book/zh-tw/v2">https://git-scm.com/book/zh-tw/v2</a> (中文版 git book)</p>
<p>Windows 命令列中的常用指令:</p>
<p>cd - change directory</p>
<p>dir - show directory content</p>
<p>y:\&gt; 代表目前位於 Y 槽根目錄, 以 &gt; 作為 prompt (回應), 等待使用者輸入指令</p>
<p><span>y:\&gt;c: 表示要從 Y 切換到 C</span></p>
<p><span>cd \ 因為 "\" 代表根目錄.</span></p>
<hr/>
<p><a href="https://nfuedu.sharepoint.com/:v:/s/wcm2023/EZNog084xGJEuyfPk_zQchEBzyGhwXRAs5cuWsAScLMDFQ?e=85DhLj">說明如何利用 pip 安裝 cmimse 所需模組.mp4</a>, 並下載 <a href="https://git-scm.com/download/win">portablegit</a> 以及指定 <a href="https://github.com/mdewcm2023">site</a> 作業 (取得作業連結請參考 Team 中的連結)</p>
<p><a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EXQljJw1yE9At9MDkIklVFAB9Ef3q59sTJnbRiVWOSSGdw?e=AtNFlJ">wcm_portable_w2-2.7z</a></p>
<h4>w3 筆記</h4>
<p>Windows 利用 Ctrl + Shift + Esc 帶出工作管理員中的效能, 可以檢視電腦硬體與網路的運作狀況.</p>
<p>檢查電腦 services, 開始 -&gt; 滑鼠右鍵帶出電腦管理 -&gt; 服務與應用程式 可以查看電腦目前所設定或啟動的 services</p>
<p>從上述第二版可攜 Python 轉進第三版:</p>
<p>進行下列修改:</p>
<ol>
<li>建立 home_ipv6 目錄下的 DeskTop 目錄 (與 AppData 接受程式執行時的暫存檔案)</li>
<li>編輯 python.properties 將 line 153 改為: python.command=pythonw</li>
<li>編輯 SciTEGlobal.properties 將 line 162 改為: load.on.activate=1 (若編輯中的檔案在其他應用程式修 改後, 可直接在 SciTE 中自動 load.</li>
<li>編輯 SciTEGlobal.properties 將 line 204 改為: tabsize=4</li>
<li>編輯 SciTEGlobal.properties 將 line 205 改為: indent.size=4</li>
<li>編輯 SciTEGlobal.properties 將 line 335 # 拿掉 (code.page=65001, 表示編輯區使用 UTF-8 編碼)</li>
<li>編輯 SciTEGlobal.properties 將 line 336 以 # 蓋掉 (code.page=0, 表示要用系統的中文編碼, 也就是 big-5)</li>
</ol>
<p>修改之後的可攜 Python: <a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/ESbmgwyK-5xGj9A18njOsXoBOmk8gsB0317yaUD3jnK2wQ?e=oOsAnr">wcm_portable_w2-3.7z</a></p>
<hr/>
<p>學號@gm.nfu.edu.tw 為 Gmail 系統, 目前學校已經將此電子郵箱落日, 新生已經不再發送此 @gm 的郵箱.</p>
<p>學號@nfu.edu.tw 為 Mail 2000 系統,  可以從 <a href="https://mail.nfu.edu.tw">https://mail.nfu.edu.tw</a> 以個人學號及自行設定的密碼登入.</p>
<p>上述兩種教育版的電子信箱 (都有 nfu.edu.tw 符號名稱), 都可以從 <a href="https://www.microsoft.com/zh-tw/education/products/office">https://www.microsoft.com/zh-tw/education/products/office</a> 登記 onedrive 帳號, 個取得 5T 雲端容量.</p>
<p>但 wcm2023 Teams 只支援 @nfu 帳號登入, 且登入後, 可以透過 MS Teams: sblk6ao (for @nfu users only) 進入網際內容管理團隊上課.</p>
<hr/>
<p>有關學員學號與 github 帳號的對應資料存入 <a href="https://github.com/mdecycu/studlist">https://github.com/mdecycu/studlist</a>, 網頁位於: <a href="https://mde.tw/studlist/2023spring/1a.txt">https://mde.tw/studlist/2023spring/1a.txt</a></p>
<p><a href="https://nfuedu-my.sharepoint.com/:v:/g/personal/yen_nfu_edu_tw/Ef5iQXdMRuBKgLDfRVO_SZUB5fFBsycGgl8hNX9yZf5pAQ?e=FaAGir">四技第四週進度提醒.mp4</a></p>
<p><a href="https://nfuedu-my.sharepoint.com/:v:/g/personal/yen_nfu_edu_tw/EYbip3FksIpJihrIQqTVNB4BhvQZKoL3Fxu4RiRTECWdQQ?e=AEaVel">四技第四週第二部影片 - cmsimde 網站建立.mp4</a></p>
<p>以下則為 wcm2023 各學員的網頁與倉儲:</p>
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/']});
}
</script>
</p>
<p id="brython_div1"></p>
<p>
<script type="text/python3">
# 從 Brython 的 browser 模組導入 document 與 html 程式庫
from browser import document, html

brython_div1 = document["brython_div1"]
try:
    c = document.query["c"]
except:
    c = "1a"
url = "https://mde.tw/studlist/2023spring/" + c + ".txt"
data = open(url).read().split("\n")
url_template = "https://mdewcm2023.github.io/site-"
repo_template = "https://github.com/mdewcm2023/site-"
for i in data[1:-1]:
    num_github = i.split("\t")
    num =  num_github[0]
    if num_github[1] == "":
        github = str(num)
    else:
        github = num_github[1]
    #print(num, github)
    url_link = html.A(str(num), href=url_template + str(github))
    repo_link = html.A("repo", href=repo_template + str(github))
    brython_div1 <= url_link
    brython_div1 <= " (" + repo_link + ")"
    brython_div1 <= html.BR()
</script>
</p>
<hr/>
<p>w5 進度</p>
<ol>
<li>建立 1a 學員 <a href="https://exam.cycu.org">https://exam.cycu.org</a> 考試帳號</li>
<li>提供 Solid Edge 2023 <a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/Ef9XW25wCPtCspWavfXRQkYBKeFkOnZDfMyA3Q-1DRhDNA?e=grfmFo">可攜版下載</a><span><span> (for @nfu users only)</span></span></li>
<li>在個人 site-github帳號 網頁中寫 Brython 程式</li>
<li>如何在 stud2.cycu.org 中配置個人的動態網站</li>
</ol>
<p>可以使用電腦輔助設計室中 C:\2021_cadlab_portable 的程式系統, 雙點擊 start_ipv6.bat, 啟動後, 檢查是否符合執行 cmsimde 網站.</p>
<p>cmsimde 倉儲網址: <a href="https://github.com/mdecycu/cmsimde">https://github.com/mdecycu/cmsimde</a> </p>
<p>原先電腦輔助設計室的 Wifi: 801WIFI 並沒有將 IPv4 與 IPv6 協定同時啟用, 目前已經修改, 因此只要在 Wifi 連線後, 將其對應的雙協定啟用後, 將可取得 192.168.50.X 與 2001:288:6004:17:: 等兩組 IP, 同時以 IPv4 與 IPv6 網路協定上網.</p>
<p>利用 cmsimde 將個人的倉儲轉為可動態啟動網站, 也可將動態網站內容轉為靜態網站的步驟:</p>
<ol>
<li>github 上的倉儲必須先設定 Github Pages, 將主倉儲設為網站的根目錄.</li>
<li>將倉儲 git clone 到近端後, 必須將 cmsimde 倉儲內容放入個人倉儲中, 且目錄名稱必須為 cmsimde, 同時將 cmsimde 中 up_dir 的目錄內容複製到個人倉儲的根目錄.</li>
<li>由於上述兩個動作, 近端倉儲設定好 cmsimde 動態與靜態網站架構後, 必須擁有修改遠端倉儲的權限, 而此權限, 可以透過 github 帳號下的 token 或 SSH 協定進行配置, 若採 token, 取得管理倉儲的權限, 則該 token 必須在有效期間內, 具備管理 repo 的權限. 若採 SSH,  則近端 session 對應必須設定與 github 上公鑰對應的私鑰. token 取得後, 必須放到倉儲 .git 目錄中 config 檔案裡的 url 連結, 也就是放在 https:// 之後, github.com 之前, 且在 token 與 github.com 中間加上 @ 符號.</li>
<li>當個人倉儲中的 cmsimde 放入, 且 up_dir 目錄取出到倉儲根目錄後, 使用者在可攜程式環境中的命令列, 就可以 cd 進入個人倉儲目錄後, 執行 cms.bat 執行動態網站, 之後用瀏覽器連結, 以 admin 共用密碼登入管理.</li>
<li>當使用者利用動態網站管理內容後, 可利用 generate_pages 將動態網站轉為靜態網站內容後, 以 acp 按鈕加上提交訊息, 將改版資料送到 github.com, 但需事先設定好可攜系統中 home_ipv6 目錄裡的 .gitconfig, 其內容包含 user.name 與 user.email 等內容, 以便用於 git commit 之提交身分綁定.</li>
</ol><h3>建網頁</h3>
<p>About <a href="https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/about-protected-branches">https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/about-protected-branches</a></p>
<p><a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EV5lw40RXvNFue1Cr2sivioBuOj_QA5KzAxDMU0Mkf7z8w?e=NtOJeN">wcm_portable_w2-5.7z</a> (下載 220MB 解開後 880MB)</p>
<p><a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EfxPBN4umu1JlOhrosRe32wBbB5g3jUPZUaoRS3PFv7ARA?e=OWe7en">miktex_portable.7z</a> (下載 314MB 解開後 964MB)</p>
<p>納入 Portable MiKTeX 之後的 可攜 Python 程式套件: <a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/Ecr0uG0UzJlBtwpYzztBupUBkUdQsQgmd9PWzfjTZBsB8w?e=zlb42j">wcm_portable_w2-4-miktex.7z</a></p>
<p>可利用上面的 MikTeX 將個人 resume 倉儲中的 .tex 進行轉檔, 詳細操作可參考:</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cd2023/content/Personal.html">https://mde.tw/cd2023/content/Personal.html</a></p>
<p>demo 倉儲: <a href="https://github.com/mdewcm2023/site-scrum-1">https://github.com/mdewcm2023/site-scrum-1</a></p>
<p>近端必須能夠執行 git: git version 會回應版本</p>
<p>利用 site-scrum-1 倉儲建立網頁的方法:</p>
<ol>
<li>設定 github pages - 進入倉儲 settings -&gt; Pages 將 main 分支設為網站的根目錄</li>
<li>利用 git clone 將倉儲內容取下 - git clone https://github.com/mdewcm2023/site-scrum-1.git</li>
<li>也就是 git clone 加上倉儲網址, 假如希望將倉儲除入一個較短的目錄, 可以輸入:</li>
<li> git clone <a href="https://github.com/mdewcm2023/site-scrum-1.git">https://github.com/mdewcm2023/site-scrum-1.git </a> s</li>
<li>將倉儲內容存入近端 s 目錄</li>
</ol>
<p>利用 cmsimde 網際內容管理程式, 作為倉儲的 cmsimde 目錄, 然後配置網站資料內容.</p>
<p>利用 <a href="https://github.com/mdecycu/cmsimde/archive/refs/heads/master.zip">https://github.com/mdecycu/cmsimde/archive/refs/heads/master.zip</a> 取下 cmsimde 引擎內容,  解開壓縮至倉儲的 cmsimde  目錄.</p>
<p>home_ipv6/.gitconfig</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">[http]
	proxy = http://p4.cycu.org:3128

[user]
	name = scrum-1
	email = scrum1@mde.tw</pre>
<p>git config --global http.proxy "<a href='http://p4.cycu.org:3128"'>http://p4.cycu.org:3128"</a></p>
<p>git config --global user.name "scrum-1"</p>
<p>git config --global user.email "scrum1@mde.tw"</p>
<h3>newbing</h3>
<p>提問: write me a python program to solve ordinary differential equation</p>
<p>回答:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import numpy as np
from scipy.integrate import odeint

def model(y, t):
    k = 0.3
    dydt = -k * y
    return dydt

y0 = 5
t = np.linspace(0, 20)

y = odeint(model, y0, t)

print(y)</pre>
<p>執行上列程式, 需要 numpy 與 scipy 等兩個 modules, 以 pip install numpy scipy 進行安裝執行. 執行結果如下:</p>
<p><img caption="false" height="359" src="/images/python_solve_ode1.png" width="400"/></p>
<p>提問: write me a python program to solve second order ordinary differential equations and plot the result by using matplotlib</p>
<p>回答:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt

# define the function that represents the second-order ODE
def dy_dx(y, x):
    # unpack the input vector
    y1, y2 = y
    # define the system of first-order ODEs
    dy1dx = y2
    dy2dx = -y1  # example: simple harmonic oscillator
    return [dy1dx, dy2dx]

# initial conditions
y0 = [1.0, 0.0]  # [y(0), y'(0)]

# x values for which we want to evaluate the solution
x = np.linspace(0, 10, 100)

# solve the ODE
y = odeint(dy_dx, y0, x)

# plot the result
plt.plot(x, y[:, 0])
plt.xlabel('x')
plt.ylabel('y')
plt.show()</pre>
<p>執行結果如下:</p>
<p><img alt="" height="273" src="/images/python_solve_ode2.png" width="400"/></p>
<p>提問: how to use cmsime and github pages to create static web site</p>
<p>回答:</p>
<p>cmsimde is a web-based content management system that is based on the World Wide Web1. You can use cmsimde to manage digital content by having a good understanding of HTML, CSS, and JavaScript<a href="https://mde.tw/content/cmsimde.html">1</a>.<br/><br/>You can use GitHub Pages to host a static website about yourself, your organization, or your project directly from a repository on GitHub.comGitHub Pages is a static site hosting service that takes HTML, CSS, and JavaScript files straight from a repository on GitHub, optionally runs the files through a build process, and publishes a website<a href="https://docs.github.com/en/pages/getting-started-with-github-pages/about-github-pages">2</a>.<br/><br/>To create a GitHub Pages site, you can either create a new repository or choose an existing repository for your site. Then you need to decide which publishing source you want to use and create the entry file for your siteGitHub Pages will look for an index.html, index.md, or README.md file as the entry file for your site<a href="https://docs.github.com/en/pages/getting-started-with-github-pages/creating-a-github-pages-site">3</a>.<br/><br/>Is there anything specific you would like to know about using cmsimde and GitHub Pages to create a static website?</p>
<p>提問: can you repeat the last answer in traditional chinese</p>
<p>回答:</p>
<p>當然可以。cmsimde 是一種基於全球資訊網的網頁內容管理系統。您可以通過對 HTML、CSS 和 JavaScript 有良好的理解來使用 cmsimde 管理數字內容。<br/><br/>您可以使用 GitHub Pages 直接從 GitHub.com 上的存儲庫中托管有關您自己、您的組織或您的項目的靜態網站。GitHub Pages 是一種靜態站點託管服務，它直接從 GitHub 存儲庫中提取 HTML、CSS 和 JavaScript 文件，可選地通過構建過程運行文件並發布網站。<br/><br/>要創建 GitHub Pages 站點，您可以創建一個新存儲庫或選擇一個現有存儲庫作為您的站點。然後您需要決定要使用哪個發布源並創建站點的入口文件。GitHub Pages 將查找 index.html、index.md 或 README.md 文件作為站點的入口文件。</p>
<p>提問: 想了解有關使用 cmsimde 和 GitHub Pages 創建靜態網站的具體信息</p>
<p>回答:</p>
<p>要使用 cmsimde 和 GitHub Pages 創建靜態網站，您需要執行以下步驟：</p>
<ol>
<li>在 GitHub.com 上創建一個新的存儲庫或選擇一個現有的存儲庫作為您的站點。</li>
<li>決定要使用哪個發布源。有關更多信息，請參見“配置 GitHub Pages 站點的發布源”。</li>
<li>為您的站點創建入口文件。GitHub Pages 將查找 index.html、index.md 或 README.md 文件作為站點的入口文件。</li>
<li>在您的存儲庫中添加和編輯您的站點文件，並使用 git push 命令將更改推送到 GitHub.com。</li>
<li>訪問您的站點以查看更改。</li>
</ol>
<p>補強上列答覆:</p>
<p>要使用 cmsimde 和 GitHub Pages 創建靜態網站，您需要執行以下步驟：</p>
<ol>
<li>在 github.com 建立一個新倉儲</li>
<li>針對新倉儲設定 Github Pages,  以 main branch 設為網站根目錄</li>
<li>將倉儲 git clone 到近端, 加上 cmsimde 程式, 並將 up_dir 內容複製到倉儲根目錄</li>
<li>在近端執行動態網站, 用來編輯動態網站與靜態網站內容 (透過動態網站內容 generate_pages 而產生)</li>
<li>以 git add ., git commit -m "提交說明字串", git push (git commit 指令需要有身分設定, 也就是 home_ipv6 或 home_ipv4  目錄中的 user.name 與 user.email 進行提交, 至於 git push 需要 .git/config 中 url 可以透過 token 標示倉儲存取權, 而 home_ipv6/.gitconfig 若在純 IPv6 下還需要有 http.proxy 的設定)</li>
<li>持續利用 localhost 中的動態網站修改內容後, 轉為靜態然後重複上一個 acp 流程將改版送到 github.com</li>
</ol><h3>Pull_requests</h3>
<p>github pull requests 運用時機: 當 github 用戶對特定倉儲無直接存取權, 但仍希望:</p>
<ol>
<li>保留該特定倉儲的所有資料 - 登入個人 github 帳號, 直接 fork (叉出), 將該倉儲放入自己的帳號</li>
<li>修改該倉儲的資料 (找到倉儲內的錯誤 (功能提升), 更改後希望請原始倉儲擁有者可以修改內容合併), fork 後可以在自己的帳號下改版, 然後送出 pull requests (拉回請求, 請求原始倉儲作者可以 review 後, 決定是否合併)</li>
</ol>
<h3>Brython_src</h3>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">&lt;p&gt;以下則為 wcm2023 各學員的網頁與倉儲:&lt;/p&gt;
&lt;script src="/static/brython.js"&gt;&lt;/script&gt;
&lt;script src="/static/brython_stdlib.js"&gt;&lt;/script&gt;
&lt;script&gt;// &lt;![CDATA[
window.onload=function(){
brython({debug:1, pythonpath:['/static/']});
}
// ]]&gt;&lt;/script&gt;
&lt;p id="brython_div1"&gt;&lt;/p&gt;
&lt;script type="text/python3"&gt;// &lt;![CDATA[
# 從 Brython 的 browser 模組導入 document 與 html 程式庫
from browser import document, html

brython_div1 = document["brython_div1"]
try:
    c = document.query["c"]
except:
    c = "1a"
url = "https://mde.tw/studlist/2023spring/" + c + ".txt"
data = open(url).read().split("\n")
url_template = "https://mdewcm2023.github.io/site-"
repo_template = "https://github.com/mdewcm2023/site-"
for i in data[1:-1]:
    num_github = i.split("\t")
    num =  num_github[0]
    try:
        github = num_github[1]
    except:
        github = str(num)
    #print(num, github)
    try:
        #print(num, github)
        url_link = html.A(str(num), href=url_template + str(github))
        repo_link = html.A("repo", href=repo_template + str(github))
    except:
        # no github added yet
        url_link = html.A(str(num), href=url_template + str(num))
        repo_link = html.A("repo", href=repo_template + str(num))
    brython_div1 &lt;= url_link
    brython_div1 &lt;= " (" + repo_link + ")"
    brython_div1 &lt;= html.BR()
// ]]&gt;&lt;/script&gt;</pre>
<p></p>
<h3>Resume</h3>
<p>納入 Portable MiKTeX 之後的 可攜 Python 程式套件: <a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/Ecr0uG0UzJlBtwpYzztBupUBkUdQsQgmd9PWzfjTZBsB8w?e=zlb42j">wcm_portable_w2-4-miktex.7z</a></p>
<p>將 .tex 轉為 .pdf 的指令:</p>
<p style="padding-left: 30px;">pdflatex -interaction=nonstopmode Result.tex</p>
<p>個人作業名稱為 resume, 以下列倉儲作為 Template:</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecycu/Resume-Automation-using-ChatGPT">https://github.com/mdecycu/Resume-Automation-using-ChatGPT</a></p>
<p>利用 Github Classroom 建立個人作業, 以 Python、LaTeX 與 ChatGPT 協助建立個人 resume, <span style="background-color: #ffff00;">最終希望能用來協助建立個人網頁或分組專題報告</span>.</p>
<p>Resume-Automation-using-ChatGPT 倉儲:</p>
<ol>
<li>所提供的 Template 只支援英文, 可嘗試<a href="https://ithelp.ithome.com.tw/m/articles/10293080">利用 LaTeX 程式語法修改為中文</a></li>
<li>OpenAI 的使用, 可以利用 Gmail 帳號<a href="https://beta.openai.com/account/api-keys">申請 API key</a></li>
<li>Resume 內容整理使用 Davinci 模型, 可在<a href="https://openai.com/api/pricing/">免費額度</a>內進行測試 (<a href="https://help.openai.com/en/articles/4936856-what-are-tokens-and-how-to-count-them">token</a> 與<a href="https://neoteric.eu/blog/how-much-does-it-cost-to-use-gpt-models-gpt-3-pricing-explained/">費用計算</a>)</li>
<li>必須要在可攜程式環境中以 <a href="https://miktex.org/howto/portable-edition">MikTeX</a> (約 800MB) 或 <a href="https://www.tug.org/texlive/doc/texlive-en/texlive-en.html#tlportable">TeXLive</a> (約 2GB) 進行編譯</li>
<li>Python 必須<a href="https://steam.oxxostudio.tw/category/python/example/openai.html">安裝 openai module</a></li>
<li>利用 <a href="https://ithelp.ithome.com.tw/articles/10278264">tkinter</a> 建立的 GUI 介面表單輸入 Resume 欄位資料後, 交由 OpenAI</li>
</ol>
<p>個人作業倉儲名稱: mdecd2023/resume-github_帳號, 例如: <a href="https://github.com/mdecd2023/resume-scrum-1">https://github.com/mdecd2023/resume-scrum-1</a> 就是帳號為 scrum-1 用戶所取得的 resume 作業倉儲.</p>
<p>作業討論:</p>
<p>採 <a href="https://www.bing.com/translator/?mkt=zh-TW">Bing Microsoft Translator</a> 直接將 <a href="https://math.mit.edu/~sswatson/whylatex.html">Why LaTeX</a>? 翻譯如下:</p>
<p>為什麼選擇 LaTeX？</p>
<p>對於包含多個或兩個數學表達式的文檔，LaTeX 為教師提供了比 Microsoft Word 等編輯器更多的優勢。</p>
<ol>
<li>在 LaTeX 中包含數學運算式涉及鍵入一些適當的字元。相比之下，在 Word 中包含數學需要公式編輯器，這是一個繁瑣且緩慢的圖形用戶介面。</li>
<li>由於內容是在純文本檔中指定的，因此通常可以使用搜索和替換或其他節省時間的機制有效地處理在 Word 中費力的任務。</li>
<li>由於上述原因，LaTeX 可節省大量長期運行時間。</li>
<li>許多用戶發現，隨著時間的推移，LaTeX 中的排版變得越來越有趣和方便。相比之下，經驗表明，即使對於專家用戶來說，Word的挫敗感在很大程度上仍然存在。</li>
<li>由於 LaTeX 是開源的，因此您可以輕鬆地與其他教師共用您的內容，而不會出現版本相容性或許可問題。</li>
<li>由於 LaTeX 已經適應了數學和科學研究社區的需求，因此您不太可能希望在 LaTeX 中無法實現的符號。</li>
<li>重複性任務可以更容易地自動化。例如，通過適當的設置，可以為學習時程表的學生<a href="https://math.mit.edu/~sswatson/pdfs/times.pdf">製作練習表</a>幾秒鐘。</li>
<li>LaTeX 足夠受歡迎，論壇和其他互聯網資源為那些對高級功能感興趣的人提供了良好的支援。</li>
</ol>
<p>值得一提的是幾個缺點:</p>
<ol>
<li>LaTeX 有一個學習曲線。這是放棄圖形使用者介面（如 Word 的公式編輯器）所帶來的效率的代價，起初成本肯定很大。</li>
<li>如果您在代碼中犯了足夠重要的錯誤，LaTeX 將為您提供錯誤訊息而不是輸出檔。但是，調試時間會隨著經驗的增加而迅速減少。</li>
</ol>
<p>參考資料:</p>
<ol>
<li><a href="http://www.study-area.org/tips/latex/chpdf.html">由 TeX/LaTeX 製作 PDF 中文檔</a></li>
<li><a href="https://math.ntnu.edu.tw/~pwtsai/quicklatex.pdf">LaTeX 的快速入門</a></li>
<li><a href="https://raw.githubusercontent.com/mdecycu/4072pj1/master/LaTeX%E5%A0%B1%E5%91%8A/4072pj1.pdf">4072pj1 專題報告</a></li>
<li><a href="https://raw.githubusercontent.com/mdecycu/4072pj3/master/project3/latex/4072pj3.pdf">4072pj3 專題報告</a></li>
<li><a href="https://raw.githubusercontent.com/mdecycu/pj4082/main/LaTeX%E5%A0%B1%E5%91%8A/4082pj1-1.pdf">pj4082 專題報告</a></li>
</ol>
<p>OpenAI Python API 程式範例:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 導入 openai
import openai

# 輸入 api_key
openai.api_key = "your_key"

# 三個月內有 $18 可以進行測試 Davinci 0.02/1k token


# 利用 create 建立問答
response = openai.Completion.create(
model="text-davinci-003",
prompt="請列出不要讀機械設計系的 5 個理由",
max_tokens=256,
temperature=0,
top_p=1,
frequency_penalty=0,
presence_penalty=0
)

# 傳回的 dict 中的 text
output = response["choices"][0]["text"]
print(output)

"""
1. 機械設計系的課程複雜，學習負擔大。
2. 機械設計系的就業前景不明朗。
3. 機械設計系的課程需要花費大量時間在實驗室中。
4. 機械設計系的課程需要掌握大量的專業知識。
5. 機械設計系的課程需要掌握大量的計算機軟件。
"""</pre>
<h4>利用 Github 與 LaTeX 協同編寫專題報告:</h4>
<p style="padding-left: 30px;">在 <a href="https://github.com/mdecd2023/resume-scrum-1">https://github.com/mdecd2023/resume-scrum-1</a> 倉儲中, 以 <a href="https://github.com/mdecycu/cmsimde">https://github.com/mdecycu/cmsimde</a> 作為子模組後, 利用 <a href="https://github.com/features/actions">Github Actions </a>納入 LaTeX 畢業專題的轉檔架構, 明定若使用者對倉儲的 pdf 進行改版, 則 <a href="https://github.com/features/actions">Github Action</a> 將會透過導引程式 (<a href="https://raw.githubusercontent.com/mdecd2023/resume-scrum-1/main/.github/workflows/main.yml">main.yml</a>), 分別安裝 Ubuntu, TeXLive 以及所需字形及模組, 最終對 latex 中的 .tex 檔案轉檔, 結合 <a href="https://github.com/mdecd2023/resume-scrum-1/tree/main/images">images 目錄</a>中的圖檔, 完成 .pdf 專題論文建立後, 以 release 的方式釋出專題報告(<a href="https://github.com/mdecd2023/resume-scrum-1/releases">4072pj1.pdf</a>).</p>
<p style="padding-left: 30px;">而參與協同的組員只需要分別或同步編寫 latex 目錄中的相關章節, 並在各改版階段處理衝突與合併, 就可以在適當時間直接在 web-based 環境中製作專題論文.</p><h3>topics1</h3>
<p>納入 Portable MiKTeX 之後的 可攜 Python 程式套件: <a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/Ecr0uG0UzJlBtwpYzztBupUBkUdQsQgmd9PWzfjTZBsB8w?e=zlb42j">wcm_portable_w2-4-miktex.7z</a></p>
<p>課程議題:</p>
<ol>
<li><a href="https://mde.tw/wcm2023/content/Brython.html">https://mde.tw/wcm2023/content/Brython.html</a> 是如何建立的? 有甚麼<a href="https://mde.tw/wcm2023/content/Brython%20demo.html">用處</a>? (兼學 <a href="https://docs.github.com/en/get-started/writing-on-github/editing-and-sharing-content-with-gists/creating-gists">Github Gist</a>?)</li>
<li>你應該已經知道在 Windows 操作系統中, 瀏覽器 (Browser, ref: <a href="https://www.google.com/search?q=what+browser+should+you+use">what browser should you use</a>, <a href="https://www.google.com/search?q=what+search+engines+should+you+use">what search engines should you use</a>) 是 <a href="https://www.google.com/search?q=world+wide+web">WWW</a> (World Wide Web 全球資訊網) 協定的客戶端 (Client), 那麼, 當使用者在瀏覽器的網址列 (URL address bar) 輸入網址, 就可以連結到該網址對應的網站, 那所謂的網站 (Web site) 是如何建立的?</li>
<li><a href="https://nginx.org/">https://nginx.org/</a> 是一套開源的程式 (<a href="https://github.com/nginx/nginx">原始碼</a>), 通常用來作甚麼? 可在 Windows 與 Ubuntu 操作系統中安裝嗎? 該如何設定?</li>
<li>Git 是甚麼? (<a href="https://ithelp.ithome.com.tw/articles/10138791">30 天精通 Git 版本控管</a>) Github 是甚麼? Github 為什麼最近發出<a href="https://techcrunch.com/2023/02/09/github-lays-off-10-and-goes-fully-remote/">通知</a>, 要所有的<a href="https://technews.tw/2023/02/13/github-lays-off-10-of-its-workforce-and-all-work-remotely/">員工全部採 Work from home 上班</a>? 有沒有可能哪一天 Github 就像 Google 終止教育版 unlimited storage 的政策, 不再提供免費帳戶選項? <span style="text-decoration: line-through;">爛學校裡的</span>窮學生除了尋找<a href="https://www.google.com/search?q=github+alternatives">替代方案</a>外, 或許這時 <a href="https://www.fossil-scm.org">FossilSCM</a> 就可派上用場.</li>
<li>Git 明明非常補, 為什麼大多數人都吞不下去? 良藥苦口嗎? 假如有天你被要求 <a href="https://en.wikipedia.org/wiki/Remote_work">WFH</a>?</li>
<li>你能想像曾經沒有手機與<a href="https://brilliantio.com/what-was-life-like-before-the-internet/">沒有全球資訊網網站之前的生活型態</a>嗎? 或者是沒有線上遊戲與動漫的年代?</li>
<li>一代不如一代, 是真的嗎? 為什麼台灣不時興高中或大學輟學出去創業? 因為 <a href="https://www.google.com/search?client=firefox-b-d&amp;q=%E7%82%BA%E4%BB%80%E9%BA%BC%E5%8F%B0%E7%81%A3%E4%B8%8D%E6%99%82%E8%88%88%E9%AB%98%E4%B8%AD%E6%88%96%E5%A4%A7%E5%AD%B8%E8%BC%9F%E5%AD%B8%E5%87%BA%E5%8E%BB%E5%89%B5%E6%A5%AD%3F">Google 繁體中文搜尋</a>只得不到 10 個結果?</li>
<li>有了 <a href="https://www.zdnet.com/article/how-to-use-chatgpt/">ChatGPT</a>, 一堆人將會沒有工作, 真是這樣嗎? 能不能打不過就加入? 聽過<a href="https://xunzi-5000yan-com.translate.goog/xiushen/?_x_tr_sl=zh-CN&amp;_x_tr_tl=zh-TW">役物而不役於物</a>嗎?</li>
<li>有一些<a href="https://sdgs.udn.com/sdgs/story/12379/3269475?from=udn_ch1010_menu_main_cate">餐廳開始用機器煮菜</a>, 那是不是廚師很快就會被淘汰? 還有人記得曾有所謂<a href="https://udn.com/umedia/story/12910/6866095">珠心算老師</a>嗎?</li>
<li>數位化, 虛擬化, 類比實體世界, 運算能力, 邏輯解析能力, 資料庫結構, 演算法, 海底電纜, 無線傳輸是靠"看不見"的"線"傳輸, 這個線是有還是無? 電力是數位還是類比?</li>
<li>曾經從台北到虎尾需要耗費好幾個小時, 現在搭高鐵只需要 1 小時 15 分, 假如<span style="text-decoration: line-through;">哆啦A夢</span>人能搭網路線則需要不到 1 秒, <a href="https://www.google.com/search?client=firefox-b-d&amp;q=%E6%88%91%E5%80%91%E6%98%AF%E4%B8%8D%E6%98%AF%E6%87%89%E8%A9%B2%E6%80%9D%E8%80%83%E9%82%A3%E4%BA%9B%E5%B7%A5%E4%BD%9C%E4%BA%BA%E9%9C%80%E8%A6%81%E5%AF%A6%E9%AB%94%E7%A7%BB%E5%8B%95%2C+%E8%80%8C%E9%82%A3%E4%BA%9B%E5%B7%A5%E4%BD%9C%E5%89%87%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E5%9C%A8%E7%B7%9A%E4%B8%8A%E5%AE%8C%E6%88%90%E5%B0%B1%E5%A5%BD">我們是不是應該思考那些工作人需要實體移動, 而那些工作則可以直接在線上完成就好</a>?</li>
<li>有人知道中華電信所提供的所謂光世代連線, 在某些時段, 用戶的網路連線協定只有 IPv4 嗎? 這會對使用者造成哪些影響?</li>
<li>Python 3.11.2 是目前最新的版本 (<a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EcsucQG0hGBPvGhckXUXhtwBW9gHS7PI-PE-moKe1vVbdg?e=8Xs9T0">下載可攜 Python3.11.2_for_NGSolve.7z</a>), 加上開源的 NGSolve 套件, 可以進行各種工程設計分析, 但因為 <a href="https://pypi.org/project/PySide2/">Pyside2</a> 尚未支援 Python 3.10 以上的版本, 因此若要導入 <a href="https://github.com/NGSolve/ngsgui">ngsgui</a>, 就必須退回 Python 3.10.8 版 (<a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EWWklzSXEqZAoAsF7YCiUdQBq3Frt-VQl9p0ah8ZE2AoBQ?e=qNMs7W">下載可攜 Python3108_for_2023.7z</a>, 支援 NGSolve with ngsgui, tcc and gnuplot, 其中 ngsugi 仍需要 debug).</li>
</ol>
<p><img alt="" class="add_border" height="220" src="/images/Pyside2_right_now_no_for_Python3.11.png" width="600"/></p>
<hr/>
<p>如何建立網站? 如何維護?</p>
<p style="padding-left: 30px;">建立網站:</p>
<p style="padding-left: 60px;">利用 Github Pages</p>
<p style="padding-left: 60px;">自行維護 server</p>
<p style="padding-left: 30px;">內容維護:</p>
<p style="padding-left: 60px;">在線上維護</p>
<p style="padding-left: 60px;">在個人的電腦上維護</p>
<p>為何需要建立網站? 為何內容維護需要紀錄版本?</p>
<p style="padding-left: 30px;">範例: <a href="https://github.com/KmolYuan">https://github.com/KmolYuan</a></p>
<p>計算機程式 -&gt; (網際內容管理) -&gt; 電腦輔助設計與實習 -&gt; 協同產品設計實習</p>
<p>請設想一個情境, 能夠從 Web-based Content Management 過程中獲益.</p>
<p style="padding-left: 30px;">舉例: 上列的四門課程, 從設計到完成評分, 幾乎完全利用線上資源建立內容.</p>
<hr/>
<p>Create a virtual server: <a href="https://www.virtualbox.org/wiki/Downloads">https://www.virtualbox.org/wiki/Downloads</a></p>
<p>下載 <a href="https://software.nfu.edu.tw/Windows/tw/Win10_21H2.9_64BIT_CH.ISO">Win10_21H2.9_64BIT_CH.ISO</a> (5.5GB for @nfu users only) (<a href="https://software.nfu.edu.tw/KMS/windows_kms.bat">KMS</a>)</p>
<p>下載 Ubuntu server: <a href="https://ubuntu.com/download/server">https://ubuntu.com/download/server</a></p>
<p><a href="https://github.com/">Github</a> and <a href="https://replit.com/">Replit</a></p><h3>Brython demo</h3>
<p>利用 Google 搜尋 <a href="https://www.google.com/search?q=pure+python+solve+differential+equations">Pure Python solve differential equations</a></p>
<p style="padding-left: 30px;">了解<a href="https://integratedmlai.com/system-of-equations-solution/">如何以純 Python 解聯立方程式</a>後, 將程式碼<a href="https://gist.github.com/mdecycu/940b020e24168c541fd3cf69b9a5619e#file-solve_system_of_eqn-py">存入 Gist</a> 後: <a href="https://mde.tw/wcm2023/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/940b020e24168c541fd3cf69b9a5619e/raw/cf4367ec2ea6b22c013a14d7d7a42aa89ef336f6/solve_system_of_eqn.py">Solved with Brython</a></p>
<h2>Ubuntu</h2>
<p><a href="https://ubuntu.com/download/server">https://ubuntu.com/download/server</a> (<a href="https://ubuntu.com/about/release-cycle">各版本生命週期</a>)</p>
<p>學習 Ubuntu 操作系統的動機:</p>
<p style="padding-left: 30px;">瞭解業界常用的操作系統除了 Windows, 還有 <a href="https://zh.wikipedia.org/zh-tw/linux">Linux</a> (<a href="https://zh.wikipedia.org/zh-tw/UNIX">Unix</a>) 以及 <a href="https://zh.wikipedia.org/wiki/%E9%BA%A6%E9%87%91%E5%A1%94%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F">Mac OS</a>: <a href="https://link.springer.com/book/10.1007/978-1-4842-3000-8">2017 Beginning Ubuntu for Windows and Mac Users 電子書</a> (可在學校網路下載)</p>
<p style="padding-left: 30px;">便於涉入 Robotics 機器人領域: <a href="https://link.springer.com/book/10.1007/978-1-4842-7750-8">2022 Robot Operating System (ROS) for Absolute Beginners 電子書</a> (可在學校網路下載)</p>
<p style="padding-left: 30px;">想要跨操作系統進行程式開發: <a href="https://link.springer.com/book/10.1007/978-1-4842-6873-5">2021 Pro Windows Subsystem for Linux (WSL) 電子書</a> (可在學校網路下載)</p>
<hr/>
<p>若要讓虛擬主機作為 Server 直接連外, 虛擬網路卡可設為 Bridged, 以橋接從宿主電腦的實體網路卡對外連線.</p>
<p style="padding-left: 30px;">Network 設為橋接 (Bridged):</p>
<p style="padding-left: 60px;">disable IPv4</p>
<p style="padding-left: 60px;">manual IPv6</p>
<p style="padding-left: 90px;">2001:288:6004:17:2023:X:課號:學號末四碼</p>
<p style="padding-left: 90px;">五專 wcm 課號: 2464</p>
<p style="padding-left: 90px;">四技 wcm 課號: 0739</p>
<p style="padding-left: 90px;">五專: X = 0</p>
<p style="padding-left: 90px;">四技一: X = 1</p>
<p style="padding-left: 90px;">四技二: X = 2 依此類推</p>
<p style="padding-left: 90px;">DNS server: 2001:b000:168::1</p>
<p style="padding-left: 90px;">Gateway: 2001:288:6004:17::254</p>
<p style="padding-left: 60px;">Install OpenSSH server</p>
<p>若虛擬主機只是要先能夠上網, 隨後再設法透過 Port mapping 成為 Server, 則虛擬網路卡可設為 Default 的 NAT, 表示要將宿主電腦視為 NAT, 虛擬主機的網路卡使用內部 IP.</p>
<p style="padding-left: 30px;">Network 設為 NAT (Network Address Transfer):</p>
<p style="padding-left: 60px;">若要使用 IPv4 或 IPv6 網路協定上網, 可視宿主所提供的網路協定, 將虛擬網路卡以 DHCP 取得網路位址與 DNS 設定.</p>
<p>若虛擬主機並不上網, 而是要在宿主中設定多台互相連線的虛擬主機, 則可將虛擬網路卡設為 Host only, 各虛擬主機則使用自訂的內部網路位址區段進行設定.</p>
<p style="padding-left: 30px;">Network 設為 Host only:</p>
<p style="padding-left: 60px;">虛擬主機可經由內部網路區段與宿主電腦連接.</p>
<hr/>
<p>學習 Ubuntu 最好的方式之一是採用虛擬主機, 無論在網路修改設定或相關套件安裝測試, 都能採用與實體主機相同的方式進行.</p>
<p>安裝 Ubuntu 操作系統最重要的步驟, 應該是網路設定:</p>
<p>當 Ubuntu 操作系統網路設定完成後, 通常會進行系統更新:</p>
<p style="padding-left: 30px;">sudo apt update</p>
<p style="padding-left: 30px;">sudo apt upgrade</p>
<p style="padding-left: 30px;">sudo apt autoremove</p>
<p>上列 apt 指令說明:</p>
<p>apt update:</p>
<p style="padding-left: 30px;">apt update fetches the latest version of the package list from your distro's software repository, and any third-party repositories you may have configured. In other words, it'll figure out what the latest version of each package and dependency is, but will not actually download or install any of those updates. (<a href="https://www.freecodecamp.org/news/sudo-apt-get-update-vs-upgrade-what-is-the-difference/">source</a>)</p>
<p>apt upgrade:</p>
<p style="padding-left: 30px;">apt upgrade downloads and installs the updates for each outdated package and dependency on your system. But just running sudo apt-get upgrade will not automatically upgrade the outdated packages – you'll still have a chance to review the changes and confirm that you want to perform the upgrades. (<a href="https://www.freecodecamp.org/news/sudo-apt-get-update-vs-upgrade-what-is-the-difference/">source</a>)</p>
<p>apt autoremove:</p>
<p style="padding-left: 30px;">apt autoremove is used to remove packages that were automatically installed to satisfy dependencies for other packages and are now no longer needed as dependencies changed<br/>or the package(s) needing them were removed in the meantime.</p>
<p>Ubuntu 可採 netplan 配置網路:</p>
<p style="padding-left: 30px;">設定檔案位於 /etc/netplan/ 目錄下, 副檔名為 .yaml</p>
<p style="padding-left: 30px;">修改後必須透過 sudo netplan apply 讀取新修改後的設定檔案</p>
<p style="padding-left: 30px;">net.yaml 範例檔案:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false"># This is the network config written by 'subiquity'
network:
  ethernets:
    enp0s3:
      addresses:
        - 2001:288:6004:xx::xx/64
      nameservers:
        addresses:
        - 2001:b000:168::1
      routes:    
        - to: default
          via: 2001:288:6004:xx::254
  version: 2</pre>
<p>安裝 stunnel:</p>
<p>sudo apt install stunnel</p>
<p>stunnel.conf 設定:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">[https]
accept = project.cycu.org:443
connect = 127.0.0.1:9443
cert = fullchain.pem
key = privkey.pem
TIMEOUTclose = 0</pre>
<p>stunnel 服務重新啟動: sudo /etc/init.d/stunnel4 restart<br/><br/>以系統服務設定 stunnel4:<br/><br/>sudo systemctl enable stunnel4.service</p>
<p>設定 Letsencrypt:</p>
<p style="padding-left: 30px;">sudo snap install core; sudo snap refresh core</p>
<p>snap proxy setup:</p>
<p style="padding-left: 30px;">sudo vi /etc/environment and add the following proxy settings:</p>
<p style="padding-left: 30px;">http_proxy=http://127.0.0.1:3128</p>
<p style="padding-left: 30px;">https_proxy=http://127.0.0.1:3128</p>
<p style="padding-left: 30px;">然後以 sudo systemctl restart snapd 重新啟動 snapd 讓 proxy 設定生效</p>
<p>Install certbot:</p>
<p style="padding-left: 30px;">sudo snap install --classic certbot</p>
<p>Prepare certbot command:</p>
<p style="padding-left: 30px;">sudo ln -s /snap/bin/certbot /usr/bin/certbot</p>
<p>Get certificate:</p>
<p style="padding-left: 30px;">sudo certbot certonly --standalone</p>
<p>Install pip3:</p>
<p style="padding-left: 30px;">sudo apt install python3-pip</p>
<p>Install modules for cmsimde:</p>
<p style="padding-left: 30px;">sudo pip3 install flask flask_cors bs4 lxml pelican markdown pyopenssl</p>
<p>Install waitress:</p>
<p style="padding-left: 30px;">sudo pip3 waitress</p>
<p>cp nocache.py:</p>
<p style="padding-left: 30px;">cp cmsimde/nocache.py nocache.py</p>
<p>For github ssh, install ncat:</p>
<p style="padding-left: 30px;">sudo apt install ncat</p>
<p>Secure .ssh/id_rsa:</p>
<p style="padding-left: 30px;">chmod og-rwx .ssh/id_rsa</p>
<p>Web-based acp to work:</p>
<ol>
<li>.ssh/id_rsa only user can read</li>
<li>acp is executable</li>
<li>.git/config url is ether token or SSH based protocol</li>
<li>nocache.py on root directory</li>
<li>server.py</li>
<li>waitress and all cmsimde modules is installed</li>
<li>ncat is installed</li>
</ol>
<p>假如採用 Virtualbox Windows 虛擬主機, 則可以透過 <a href="https://nssm.cc/download">nssm</a> 設定服務:</p>
<p style="padding-left: 30px;">nssm install ubuntu_for_project</p>
<p style="padding-left: 30px;">VBoxHeadless.exe --startvm "Ubuntu_2204_for_project"</p>
<p style="padding-left: 30px;">並且以管理者身分設定 log on 啟動</p>
<p>Use Python to delete user account and directory:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import os
name = input("Username: ")
choice = input("Keep home directory? [Y/n]")
if choice == 'n':
    os.system("sudo deluser --remove-home "+name)
    print("User deleted")
else:
    os.system("sudo deluser "+name)
    print("User deleted")</pre>
<p>Change user shell:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import os
with open("users.txt", "r", encoding="UTF-8") as f:
    data = f.read().splitlines()
for i in data:
    account = i.split(":")[0]
    print(account)
    os.system("sudo chsh -s /bin/bash " + account)</pre>
<p>getps:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">#! /bin/bash
ps axo pid,comm,user | grep "python3"</pre>
<p>getdir + process id:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">pwdx $1
</pre>
<p>server.py</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from waitress import serve
from cmsimde import flaskapp

serve(flaskapp.app, listen='127.0.0.1:各學員9開頭的內部埠號', threads=8)
</pre>
<p>列出 Ubuntu 中 port 使用相關資訊: lsof -i :9123</p>
<p>lsof: list open files</p>
<p>-i: selects the listing of files any of whose Internet address matches the address specified in i.  If no address is specified, this option selects the listing of all Internet and x.25 (HP-UX) network files.</p>
<p>列出目前系統用戶 GID and UID</p>
<p>cut -d: -f1,3 /etc/passwd</p>
<p>users.txt 格式:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">wcmuser1:password1:1002:1002:wcmuser1:/home/wcmuser1:/bin/bash
wcmuser2:password2:1003:1003:wcmuser2:/home/wcmuser2:/bin/bash
wcmuser3:password3:1004:1004:wcmuser3:/home/wcmuser3:/bin/bash</pre>
<p>新增上列三名新用戶指令:</p>
<p>sudo newusers users.txt</p>
<p>Add super user account:</p>
<p style="padding-left: 30px;">新增 username 帳號, 並授予管理者權限.<br/><br/>sudo adduser username<br/><br/>sudo usermod -aG sudo username</p>
<p>Delete user account:</p>
<p style="padding-left: 30px;">sudo deluser --remove-home account_name</p>
<p>列出 user id:</p>
<p style="padding-left: 30px;">列出現有帳號 uid 的指令為: cut -d: -f1,3 /etc/passwd<br/><br/>表示要從 /etc/passwd 檔案, 以 : 符號分割檔案, 然後只取出第一與第三欄位的資料.</p>
<p></p>
<h2>Windows</h2>
<p>利用 Virtualbox 設定 Windows 10 虛擬主機.</p>
<p>下載 <a href="https://software.nfu.edu.tw/Windows/tw/Win10_21H2.9_64BIT_CH.ISO">Win10_21H2.9_64BIT_CH.ISO</a> (5.5GB for @nfu users only) (<a href="https://software.nfu.edu.tw/KMS/windows_kms.bat">KMS</a>)</p>
<p>Windows 10 目前也提供 OpenSSH client (內建) 與 server 的<a href="https://learn.microsoft.com/zh-tw/windows-server/administration/openssh/openssh_install_firstuse">安裝服務</a>, 並可在 Windows 操作系統中<a href="https://learn.microsoft.com/zh-tw/windows/wsl/install">安裝 WSL</a> (Windows Subsystem for Linux)</p>
<p><a href="https://learn.microsoft.com/en-us/windows/wsl/about">What is WSL</a>?</p>
<p><a href="https://en.wikipedia.org/wiki/Windows_Subsystem_for_Linux">WSL 推出歷史</a></p>
<p><a href="https://www.whitewaterfoundry.com/what-is-wsl">其他 WSL 說明</a></p>
<p><a href="https://thesecmaster.com/what-you-should-know-about-the-windows-subsystem-for-linux-in-2023/">2023 WSL 須知</a></p>
<p><a href="https://learn.microsoft.com/en-us/windows/wsl/faq">WSL faq</a></p>
<p><a href="https://blogs.windows.com/windowsdeveloper/2016/07/22/fun-with-the-windows-subsystem-for-linux/">Fun with WSL</a></p>
<p><a href="https://www.howtogeek.com/devops/what-is-windows-subsystem-for-linux-wsl-and-how-do-you-use-it/">如何運用 WSL</a></p>
<p><a href="https://www.makeuseof.com/pros-cons-windows-subsystem-for-linux/">WSL 的優缺點</a></p>
<p></p>
<h2>History</h2>
<p>當我們利用 template 建立個人的作業網站之後, 假如原始的 template 倉儲改版, 而學員的作業倉儲也改版, 學員的倉儲應該要如何納入原始 template 倉儲中的改版資料? 即便在上學期末, 各分組學員已經用過 fork 與 pull requests, 但是針對上述所提出來的資料合併議題, 其實並不簡單. 有興趣處理這項問題, 大家可以<a href="https://stackoverflow.com/questions/56577184/github-pull-changes-from-a-template-repository">參考一下網友們如何處理這個 template 改版與合併的問題</a>.</p>
<p>利用 <a href="https://forms.microsoft.com/">Microsoft Forms</a> 建立各組互評表單</p>
<p><a href="https://zen1976.com/homework/">https://zen1976.com/homework/</a></p>
<p><a href="https://obsproject.com/">OBS</a> and <a href="https://www.youtube.com/@-kmolab9376/videos">Youtube 教學影片</a> (學習如何使用 OBS 並利用 Arduino 與 Python 開發周邊套件）</p>
<p style="padding-left: 30px;"><a href="https://github.com/micahmo/obs-tally-python">https://github.com/micahmo/obs-tally-python</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/dmadison/OBS-Mute-Indicator">https://github.com/dmadison/OBS-Mute-Indicator</a></p>
<p style="padding-left: 30px;"><a href="https://obsproject.com/docs/scripting.html">https://obsproject.com/docs/scripting.html</a></p>
<p>Python script using proxy to execute:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import os

proxy = 'http://[2001:288:6004:17::xx]:3128'

os.environ['http_proxy'] = proxy
os.environ['HTTP_PROXY'] = proxy
os.environ['https_proxy'] = proxy
os.environ['HTTPS_PROXY'] = proxy</pre>
<p></p>
<h1>Website</h1>
<p>Website 指的是全球資訊網協定下的網站, 而全球資訊網協定是依附在 TCP/IP 與 HTTP 網路協定下的客戶端 (瀏覽器) 與伺服器端.</p>
<p>若利用 <a href="https://pages.github.com/">Github Pages</a> 建立個人網站, 則伺服器端就是 github.io 網址中的伺服器,</p>
<p>Github Pages Docs: <a href="https://docs.github.com/en/enterprise-server@3.5/admin/overview/about-github-enterprise-server">https://docs.github.com/en/enterprise-server@3.5/admin/overview/about-github-enterprise-server</a> </p>
<p>Github 帳號功能比較: <a href="https://github.com/pricing#feature-comparison">https://github.com/pricing#feature-comparison</a></p>
<p><a href="https://pages.github.com/">Github Pages</a>:</p>
<ol>
<li>由 Github 所提供的靜態網頁全球資訊網伺服器 (Static site hosting server)</li>
<li>可伺服 Github 倉儲中的超文件, 包括 html, css 與 Javascript 資料</li>
<li>帳號.github.io 是最短的網站名稱, 但要求倉儲必須命名為: 帳號.github.io</li>
<li>將資料轉為網站時, 必須檢查倉儲內容是否具備轉為網站的<a href="https://docs.github.com/en/pages/getting-started-with-github-pages/about-github-pages">條件</a></li>
<li>網站總容量必須小於 1GB (因此倉儲中儘量不要存放大檔案, 建議將檔案放入 Onedrive 後在網站中提供連結)</li>
<li>網站連結總頻寬必須小於 100GB/月 (因此網站中不要放入無謂的 html 連結或設定, 意即不要直接從其他網站 copy/paste 資料, 而應提供原始文字檔後, 進入編輯器設定必要的設定與連結)</li>
<li>網站轉檔次數限制在<span style="background-color: #ffff00;">每一小時 10 次</span> (意即每一小時的推送 (push) 次數不要超過 10 次)</li>
<li>使用者必須遵守 <a href="https://docs.github.com/en/site-policy/github-terms/github-terms-of-service">Github Terms of Service</a></li>
</ol>
<h2>Javascript</h2>
<p><a href="https://link.springer.com/book/10.1007/978-1-4842-3027-5">Beginning JQuery</a> (2017)</p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4842-6071-5">Practical Bootstrap</a> (2020)</p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4842-8176-5">Pro Angular</a> (2022)</p>
<h3>JQuery</h3>
<p><a href="https://link.springer.com/book/10.1007/978-1-4302-6434-7">JQuery 2 Recipes</a> (2014)</p>
<p>以下資料引自 <a href="https://link.springer.com/book/10.1007/978-1-4842-3027-5">Beginning JQuery</a> (2017)</p>
<p>Using JavaScript on a Web Page<br/><br/>Within a typical HTML file, there are typically two ways to add JavaScript to a page. To add some JavaScript, you can either add your code inline, within a script tag, like so:<br/><br/></p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">&lt;script type="text/javascript"&gt;

   //write code here 

&lt;/script&gt; </pre>
<p><br/>or</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">&lt;script type="text/javascript" src="path/to/your/file.js"&gt;&lt;/script&gt;</pre>
<p>The first location is within the head element, and the second is just before the closing &lt;/body&gt; tag. In the past, scripts were always loaded into the head element, but with performance and page loading speeds more critical than ever, it’s often recommended to place your scripts at the bottom of your page. This is an approach we side with, too.<br/><br/>The browser renders the page from top to bottom, and when it comes across your scripts, it pauses rendering the page to load in your JS: . Thus, the page loads slower (or, more importantly, feels that way to the user) because the rendering is blocked by your loading JavaScript files. Hence, putting the scripts just before the closing &lt;/body&gt; tag means that when the time comes to load your scripts, the rest of the page has been loaded.</p>
<h3>Bootstrap</h3>
<p><a href="https://link.springer.com/book/10.1007/978-1-4842-6071-5">Practical Bootstrap</a> (2020)</p>
<p><a href="https://github.com/helloflask/bootstrap-flask">https://github.com/helloflask/bootstrap-flask</a></p>
<p><a href="https://bootstrap-flask.readthedocs.io/en/stable/">https://bootstrap-flask.readthedocs.io/en/stable/</a></p>
<p>從 <a href="https://github.com/mdecycu/cmsimde/search?q=bootstrap">https://github.com/mdecycu/cmsimde/search?q=bootstrap</a> 可以發現 2023.03.3 時 cmsimde 採用的 Bootstrap 版次為 4.1.3</p>
<h3>Angular</h3>
<p><a href="https://link.springer.com/book/10.1007/978-1-4842-8176-5">Pro Angular</a> (2022)</p>
<h1>Reeborg</h1>
<p><a href="https://github.com/aroberge/reeborg">https://github.com/aroberge/reeborg</a></p>
<p><a href="https://mde.tw/wcm2023/reeborg2016/">https://mde.tw/wcm2023/reeborg2016/</a></p>
<ol>
<li>Reeborg 是如何建立的?</li>
<li>初學程式者如何透過 Reeborg 學習 Python (Brython and CPython) 與 Javascript</li>
</ol>
<h1>cmsimde</h1>
<p>有關 cmsimde 與 github pages:</p>
<ol>
<li>cmsimde 是一套利用 Python 程式語言編寫的網際內容管理系統</li>
<li>cmsimde 執行時需要 flask flask_cors bs4 lxml pelican markdown leo pyopenssl Python 模組</li>
<li>github pages 是一個可以將倉儲內的超文件轉為網站的雲端服務</li>
<li>利用 cmsimde 執行動態網站的目的是以<span style="background-color: #ffff00;">相對較簡潔</span>的方式來建立網站</li>
</ol>
<p><a href="https://github.com/mdecycu/cmsimde">https://github.com/mdecycu/cmsimde</a></p>
<p>執行 cmsimde 動態網站需要下列 Python 模組:</p>
<p style="padding-left: 30px;">For Windows:</p>
<p style="padding-left: 60px;">pip install flask flask_cors bs4 lxml pelican markdown leo pyopenssl</p>
<p style="padding-left: 30px;">For Ubuntu:</p>
<p style="padding-left: 60px;">先安裝 pip3:</p>
<p style="padding-left: 90px;">sudo apt install python3-pip</p>
<p style="padding-left: 60px;">接著利用 pip3 安裝執行 cmsimde 所需模組:</p>
<p style="padding-left: 60px;">pip3 install flask flask_cors bs4 lxml pelican markdown leo pyopenssl</p>
<p>本課程第三部分在說明 <a href="https://github.com/mdecycu/cmsite">https://github.com/mdecycu/cmsite</a> 與 <a href="https://github.com/mdecycu/cmsimde_site">https://github.com/mdecycu/cmsimde_site</a> 如何搭建, 程式架構與應用的發展如何從個人電腦導向手機.</p>
<ol>
<li>由於手機相機的解析度極高, 因此若能在上傳手機相片前或之後將影像檔案縮減至網站可視之檔案大小, 將可省下頻寬與倉儲儲存的負擔. (<a href="https://medium.com/hootsuite-engineering/mobile-photo-uploads-with-html5-f7ea174ef128">參考資料</a>)</li>
<li>設法利用 Brython 或 Python 建立將 URL 轉為 QR Code, 以便讓手機可以直接透過手機拍攝後直接進入內容管理系統網站. (<a href="https://segno.readthedocs.io/en/stable/comparison-qrcode-libs.html">參考資料</a>)</li>
</ol><h2>Resize image</h2>
<p><a href="https://gist.github.com/lzhbrian/560258a5bbb3ab4ee2c451b7d3801dfd">source</a>, <a href="https://github.com/joelvardy/javascript-image-upload">reference</a>, <a href="https://github.com/pqina/filepond">reference</a></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;img src="" id="image"&gt;
&lt;input id="input" type="file" onchange="handleFiles()"&gt;

&lt;script&gt;
    function handleFiles()
    {
        var dataurl = null;
        var filesToUpload = document.getElementById('input').files;
        var file = filesToUpload[0];

        // Create an image
        var img = document.createElement("img");
        // Create a file reader
        var reader = new FileReader();
        // Set the image once loaded into file reader
        reader.onload = function(e)
        {
            img.src = e.target.result;

            img.onload = function () {
                var canvas = document.createElement("canvas");
                var ctx = canvas.getContext("2d");
                ctx.drawImage(img, 0, 0);

                var MAX_WIDTH = 300;
                var MAX_HEIGHT = 400;
                var width = img.width;
                var height = img.height;

                if (width &gt; height) {
                  if (width &gt; MAX_WIDTH) {
                    height *= MAX_WIDTH / width;
                    width = MAX_WIDTH;
                  }
                } else {
                  if (height &gt; MAX_HEIGHT) {
                    width *= MAX_HEIGHT / height;
                    height = MAX_HEIGHT;
                  }
                }
                canvas.width = width;
                canvas.height = height;
                var ctx = canvas.getContext("2d");
                ctx.drawImage(img, 0, 0, width, height);

                dataurl = canvas.toDataURL("image/jpeg");

                document.getElementById('image').src = dataurl;

                // Post the data
                var fd = new FormData();
                fd.append("name", "some_filename.jpg");
                fd.append("image", dataurl);
                fd.append("info", "lah_de_dah");
                $.ajax({
                    url: '/ajax_photo',
                    data: fd,
                    cache: false,
                    contentType: false,
                    processData: false,
                    type: 'POST',
                    success: function(data){
                        $('#form_photo')[0].reset();
                        location.reload();
                    }
                });
            } // img.onload
        }
        // Load files into file reader
        reader.readAsDataURL(file);
    }
&lt;/script&gt;</pre>
<p></p>
<h1>LaTeX</h1>
<p>LaTeX 是一種基於 TeX(<a href="https://ctan.org/tex-archive/systems/knuth/dist/tex">https://ctan.org/tex-archive/systems/knuth/dist/tex</a>) 的 macro-package: <a href="https://github.com/latex3/">https://github.com/latex3/</a></p>
<p>TeX book 的原始碼: <a href="http://mirrors.ctan.org/systems/knuth/dist/tex/texbook.tex">http://mirrors.ctan.org/systems/knuth/dist/tex/texbook.tex</a></p>
<p>新手入門 LaTeX:</p>
<p style="padding-left: 60px;"><a href="https://www.dickimaw-books.com/latex/novices/novices-screen.pdf">https://www.dickimaw-books.com/latex/novices/novices-screen.pdf</a></p>
<p> point ≈ 0.0138 inch ≈ 0.3515 mm</p>
<p>報告設定檔案: <a href="https://mdecd2023.github.io/resume-scrum-1/downloads/latex_cd_report_using_github_actions.7z">https://mdecd2023.github.io/resume-scrum-1/downloads/latex_cd_report_using_github_actions.7z </a></p>
<p>References:</p>
<p style="padding-left: 30px;"><a href="https://www.dickimaw-books.com/latex/novices/">https://www.dickimaw-books.com/latex/novices/</a> </p>
<p style="padding-left: 30px;"><a href="https://www.dickimaw-books.com/latex/admin/html/contents.shtml">https://www.dickimaw-books.com/latex/admin/html/contents.shtml</a> </p>
<p style="padding-left: 30px;"><a href="https://www.dickimaw-books.com/latex/thesis/">https://www.dickimaw-books.com/latex/thesis/</a> </p><h1>Python</h1>
<p>利用以下流程所建立的 Python 3.11.2 可攜套件: <a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EbT9h2uxP41DhXp6TkYQKNABgtLPvnMq5y781nH5TzeuNQ?e=zW9Hkf">Python311_portable.7z</a> (for @nfu users only)</p>
<p><a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EWWklzSXEqZAoAsF7YCiUdQBq3Frt-VQl9p0ah8ZE2AoBQ?e=qNMs7W">下載可攜 Python3108_for_2023.7z</a> (includes Python 3.0.8, tcc, gnuplot)</p>
<h4>何謂可攜式 Python 程式環境?</h4>
<h4 style="padding-left: 30px;">Python 程式是如何執行的?</h4>
<p style="padding-left: 30px;">首先 Python 是一種解譯式 (Interpreted) 程式語言, 與 C 或 C++ 程式語言最大的差別是, C/C++ 程式碼通常必須透過編譯 (Compile) 與連結 (Link) 的過程, 將原始碼轉為可執行的格式 (在 Windows 操作系統為 .exe 檔案), 而 Python 程式寫好後, 可以直接利用解譯器執行, 使用者不需要手動執行程式碼的編譯, 而是由解譯器在執行前即時將程式碼轉換為可執行檔案.</p>
<p style="padding-left: 30px;">在 <a href="https://www.geeksforgeeks.org/internal-working-of-python/">geeksforgeeks 網站</a>, 以下列敘述說明 Python 程式如何執行:</p>
<p style="padding-left: 30px;">Python is an object-oriented programming language like Java. Python is called an interpreted language. Python uses code modules that are interchangeable instead of a single long list of instructions that was standard for functional programming languages. The standard implementation of python is called "cpython". It is the default and widely used implementation of Python.</p>
<p style="padding-left: 30px;">Python doesn’t convert its code into machine code, something that hardware can understand. It actually converts it into something called byte code. So within python, compilation happens, but it’s just not into a machine language. It is into byte code (.pyc or .pyo) and this byte code can’t be understood by the CPU. So we need an interpreter called the python virtual machine to execute the byte codes</p>
<p style="padding-left: 30px;">針對 Python 程式的"編譯"過程, 則<a href="https://www.geeksforgeeks.org/understanding-the-execution-of-python-program/">說明如下</a>:</p>
<p style="padding-left: 30px;">The Python program is converted into byte code. Byte code is a fixed set of instructions that represent arithmetic, comparison, memory operations, etc. It can run on any operating system and hardware. The byte code instructions are created in the .pyc file. The .pyc file is not explicitly created as Python handles it internally but it can be viewed with the following command:</p>
<p style="padding-left: 60px;">Y:\tmp\python_ex&gt;python -m py_compile hello.py</p>
<p style="padding-left: 30px;">-m and py_compile represent module and module name respectively. This module is responsible to generate .pyc file. The compiler creates a directory named  __pycache__ where it stores the hello.cpython-39.pyc file (若採用 Python 3.9 版次的編譯器).</p>
<p style="padding-left: 30px;">至於針對 Python 程式的"解譯"執行過程, 則<a href="https://www.geeksforgeeks.org/understanding-the-execution-of-python-program/">說明如下</a>:</p>
<p style="padding-left: 30px;">The next step involves converting the byte code (.pyc file) into machine code. This step is necessary as the computer can understand only machine code (binary code). Python Virtual Machine (PVM) first understands the operating system and processor in the computer and then converts it into machine code. Further, these machine code instructions are executed by processor and the results are displayed.</p>
<p style="padding-left: 30px;">However, the interpreter inside the PVM translates the program line by line thereby consuming a lot of time. To overcome this, a compiler known as Just In Time (JIT) is added to PVM. JIT compiler improves the execution speed of the Python program. This compiler is not used in all Python environments like CPython which is standard Python software.</p>
<p style="padding-left: 30px;">To execute the hello.cpython-39.pyc we can use the following command:</p>
<p style="padding-left: 60px;">Y:\tmp\python_ex&gt;python __pycache__\hello.cpython-39.pyc</p>
<p style="padding-left: 30px;">至於有關 python.exe 與 pythonw.exe 的差別, 則參見<a href="https://stackoverflow.com/questions/9705982/pythonw-exe-or-python-exe">這裡的說明</a>. 至於 SciTE 設定 python.properties 中, 使用 pythonw.exe -u 表示除了採非同步 (asynchronous) 執行模式外, 同時 force the stdout and stderr streams to be unbuffered; but has no effect on stdin.</p>
<h4 style="padding-left: 30px;">Python 解譯器的類別:</h4>
<p style="padding-left: 30px;">最早的 Python 解譯器以 C 程式語言編寫, 稱為 <a href="https://en.wikipedia.org/wiki/CPython">CPython</a>, 以 Python 編寫的 Python 解譯器稱為 <a href="https://en.wikipedia.org/wiki/PyPy">Pypy</a>, 以 .NET 技術編寫的 Python 解譯器稱為 <a href="https://en.wikipedia.org/wiki/IronPython">Ironpython</a>, 以 Java 編寫的 Python 解譯器稱為 <a href="https://en.wikipedia.org/wiki/Jython">Jython</a>, 以 Javascript 編寫的 Python 解譯器稱為 <a href="https://brython.info/">Brython</a>. 以 Rust 編寫的 Python 解譯器稱為 <a href="https://github.com/RustPython/RustPython">RustPython</a>.</p>
<h4 style="padding-left: 30px;">建立可攜 Python 程式環境的目的:</h4>
<p style="padding-left: 30px;">一般在 Windows 10 中使用 <a href="https://en.wikipedia.org/wiki/CPython">CPython</a> 都是透過操作系統安裝, 將 <a href="https://en.wikipedia.org/wiki/CPython">CPython</a> 解譯器登錄在操作系統的 <a href="https://en.wikipedia.org/wiki/Windows_Registry">Registry</a> 中. 只不過配置在操作系統的 <a href="https://en.wikipedia.org/wiki/CPython">CPython</a> 解譯器若在使用過程中, 透過 <a href="https://pypi.org/project/pip/">pip</a> 安裝額外的模組後, 當電腦輔助設計室中的電腦重新開機後, 操作系統將會因為安裝防寫套件而恢復原先所安裝無額外模組的狀態.</p>
<p style="padding-left: 30px;">網際內容管理與協同產品設計實習課程為了<span style="background-color: #ffff99;">讓使用者可以隨身帶著 <a href="https://en.wikipedia.org/wiki/CPython" style="background-color: #ffff99;">CPython</a> 解譯器</span>, 因此繞過 Windows 10 操作系統的 Registry 登錄, 設法以批次檔案在虛擬的硬碟 (y:) 啟動 <a href="https://en.wikipedia.org/wiki/CPython">CPython</a> 解譯環境.</p>
<p style="padding-left: 30px;">此外, 配置在 USB 隨身碟的可攜 <a href="https://en.wikipedia.org/wiki/CPython">CPython</a> 程式環境, 除了可執行一般 Python 程式外, 也可自行安裝所需模組, 並用於 <a href="https://github.com/mdecourse/cmsimde">cmsimde</a> 動態與靜態網站編輯.</p>
<p style="padding-left: 30px;">可攜程式環境中除 <a href="https://en.wikipedia.org/wiki/CPython">CPython</a>, 還可配置 <a href="https://www.msys2.org/">MSYS2</a> C/C++ 編譯系統. 針對 <a href="https://www.scintilla.org/SciTE.html">SciTE</a>, <a href="https://github.com/solvespace/solvespace">Solvespace</a>, <a href="https://github.com/Range-Software/range3">Range3</a>, <a href="https://github.com/CoppeliaRobotics">CoppeliaSim</a> 等開源套件執行編譯.</p>
<h4>如何建立可攜 Python 程式環境?</h4>
<p style="padding-left: 30px;">能放入 USB 隨身碟執行的 Python 程式環境包含兩個部分:</p>
<p style="padding-left: 60px;">(1) Python 解譯器系統檔案</p>
<p style="padding-left: 60px;">(2) 可攜啟動設定批次檔 (例如: <a href="http://wcm.cycu.org:88/github/wcm2022_guide/downloads/start_ipv6.bat">start_ipv6.bat</a>)</p>
<p style="padding-left: 30px;">要在 Windows 操作系統中, 取得各版本的 Python 解譯器系統檔案, 也有兩種方法:</p>
<p style="padding-left: 60px;">(1) 從官方網站下載安裝檔 (例如: <a href="https://www.python.org/ftp/python/3.10.2/">3.10.2 版</a>的 <a href="https://www.python.org/ftp/python/3.10.2/python-3.10.2-amd64.exe">python-3.10.2-amd64.exe)</a>, 手動安裝 Python, 取下安裝內容後, 解除安裝程式.</p>
<p style="padding-left: 60px;">(2) 利用 <a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/Eatd1g4iPyFFoZFlwR66DisBHx-fNimjugQ2svoXQJAWSQ?e=qrEmuR">gen_portable_python.py</a>, 從 Python 官方網站下載基本的 .msi 檔案 (例如 <a href="https://www.python.org/ftp/python/3.10.2/amd64/">3.10.2 版</a>中的 core.msi, dev.msi, exe.msi, lib.msi, tcltk.msi 與 tools.msi), 然後利用 <a href="https://docs.microsoft.com/zh-tw/windows-server/administration/windows-commands/msiexec">msiexec.exe</a> 配合 <a href="https://docs.microsoft.com/zh-tw/windows/win32/msi/targetdir">targetdir</a> 屬性解開各安裝檔.</p>
<p id="pp310">以下將要結合 <a href="https://www.scintilla.org/SciTE.html">SciTE</a>, <a href="https://github.com/TinyCC/tinycc">Tiny C Compiler</a> 與 <a href="https://www.python.org/ftp/python/3.10.2/">Python 3.10.2</a>, 建立一個可攜版的 CPython 與 <a href="https://en.wikipedia.org/wiki/ANSI_C">ANSI C</a> 執行環境.</p>
<ol>
<li>從 <a href="http://download.savannah.gnu.org/releases/tinycc/">http://download.savannah.gnu.org/releases/tinycc/</a> 下載 <a href="http://download.savannah.gnu.org/releases/tinycc/tcc-0.9.27-win64-bin.zip">tcc-0.9.27-win64-bin.zip</a>.</li>
<li>從 <a href="https://www.scintilla.org/SciTEDownload.html">https://www.scintilla.org/SciTEDownload.html</a> 下載 <a href="https://www.scintilla.org/wscite521.zip">wscite521.zip</a>.</li>
<li>利用 Python 3.9.5 (或先前的 Python3 舊版可攜程式) 執行 <a href="http://wcm.cycu.org:88/github/wcm2022_guide/downloads/gen_portable_python.py">gen_portable_python.py</a> 取得 Python310 解譯器系統檔案.</li>
<li>根據上述流程建立的基本 Python 與 ANSI C 可攜程式系統 <a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/ETQ0bIB9Vs1CloTwDiqnMO0BV_SCXVQUmfPd3sANXqF1ZA?e=bpP7C0">Portable_py310_tcc.7z</a> (for @nfu users only, 此一 Python 解譯器只帶有基本模組且尚未安裝 <a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EUaDMWggjIZAiFSVjo-otN8BuZe0GpaAio4J_NRzz39tRA?e=9FhCRC">get-pip.py</a>)</li>
<li>此一 Python 解譯器以 python <a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EUaDMWggjIZAiFSVjo-otN8BuZe0GpaAio4J_NRzz39tRA?e=9FhCRC">get-pip.py</a> 安裝 pip 後, 再以 pip install flask flask_cors bs4 lxml pelican markdown leo pyopenssl 安裝 <a href="https://mde.tw/cmstemplate/content/CMSiMDE.html">cmsimde 所需模組</a>後, 即可用於 wcm2022 動態與靜態系統的編輯.</li>
<li>此一 Python 解譯器再結合 <a href="https://git-scm.com/download/win">Portablegit</a> 與 <a href="https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html">PUTTY</a>, 就可以支援以 <a href="https://mde.tw/wcm2022_guide/content/Token%20and%20SSH.html">SSH</a> 執行 github 倉儲的 git push.</li>
</ol>
<h4>如何建立網際 Python 程式環境 (Brython)?</h4>
<p style="padding-left: 30px;">例如: <a href="https://mde.tw/wcm2022_guide/content/run.html">run</a> 頁面.</p>
<p>從 <a href="https://drive.google.com/file/d/1TMPsHz6G01-pxkvXf9NFM8nFdtCHQv8D/view?usp=sharing">portable_python_wcm2022.7z</a> 下載的可攜程式環境有哪些功能?</p>
<p><span style="background-color: #ffff99;">請注意: 以下的 .7z 檔案下載, 只允許在系上網段上下載</span>.</p>
<ol>
<li><a href="http://wcm.cycu.org:88/compile_copsim_cd2022.7z">compile_copsim_cd2022.7z</a> (file size: 5 GB, extracted size: 17.3 GB, 包含除了 NX1980 之外的所有課程相關可攜程式套件, 是專門為 <a href="https://mde.tw/cd2022">cd2022</a> 課程學員打造的套件).</li>
<li><a href="http://wcm.cycu.org:88/portable_python_wcm2022.7z">portable_python_wcm2022.7z</a> (file size: 513 MB, extracted size: 2.3 G, 這是專門為 <a href="https://mde.tw/wcm2022">wcm2022</a> 課程打造的可攜程式套件, 適合選修學員下載後在任何 Windows 10 中以隨身碟啟動後操作)</li>
</ol>
<p>Web-based camera:</p>
<p>將 Webcam 接到電腦, 設定電腦可連外的 IP address, pip install flask flask_cors opencv-python 後, 執行下列程式, 就可以透過 <a href="https://your_computer_ip_address/showimage">https://your_computer_ip_address/showimage</a> 看到 webcam 畫面.</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">#pip install flask flask_cors opencv-python
# https://your_computer_ip_address/showimage
from flask import Flask, send_from_directory, request, redirect, \
    render_template, session, make_response, url_for, flash, Response
from flask_cors import CORS
import sys
import os
import cv2
import socket

app = Flask(__name__)
CORS(app, support_credentials=False)

@app.route('/')
def index():
    return "index"

@app.route("/video_feed")
def video_feed():
    return Response(getimage(), mimetype="multipart/x-mixed-replace; boundary=frame")

@app.route("/showimage")
def showimage():
    return '''
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Stream&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h1&gt;Video Stream&lt;/h1&gt;
        &lt;img src="/video_feed" width="720" height="540"&gt;&lt;/img&gt;
    &lt;/body&gt;
&lt;/html&gt;
'''

def getimage():
    cap = cv2.VideoCapture(0)

    '''
        #Check whether user selected camera is opened successfully.
        if not (cap.isOpened()):
            print('Could not open video device')
        else:
            print('Video device opened')
        '''

    cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
    cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)

    while True:
        ret, frame = cap.read()
        # 將圖片轉為灰階
        #gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        #cv2.imwrite('test.jpg', frame)
        ret, jpeg = cv2.imencode('.jpg', frame)
        #jpeg.tobytes()
        yield (b'--frame\r\n'
        b'Content-Type: image/jpeg\r\n\r\n' + jpeg.tobytes() + b'\r\n')
    return "getimage"

if __name__ == "__main__":
    #ipv6_address = socket.getaddrinfo("domain.name", 0, socket.AF_INET6)[0][4][0]
    ip = "your_computer_ip_address"
    port = 443
    app.run(host=ip, port=port, debug=True, ssl_context="adhoc")
    #app.run()</pre>
<p></p><h2>Brython</h2>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>
<h3>Brython_ex2</h3>
<p>This code uses the Euler method to approximate the solution to the ODE dy/dx = x - y with an initial condition of y0 = 1.0. The solution is calculated for a range of x values from 0 to 5.</p>
<p id="brython_div"></p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/']});
}
</script>
<p>Solve ODE:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import document

def dy_dx(y, x):
    return x - y

x_start = 0
x_end = 5
n_points = 100
x = [x_start + i * (x_end - x_start) / (n_points - 1) for i in range(n_points)]
y0 = 1.0
h = x[1] - x[0]
y = [y0]
for i in range(1, len(x)):
    y.append(y[-1] + h * dy_dx(y[-1], x[i-1]))

# Create a new paragraph element and set its text content to the solution
p = document.createElement('p')
p.textContent = f"The solution to the ODE is: {y}"

# Append the paragraph element to the body of the webpage
document.body.appendChild(p)</pre>
<p></p>
<p>
<script type="text/python3">
from browser import document, window

def dy_dx(y, x):
    return x - y

x_start = 0
x_end = 5
n_points = 100
x = [x_start + i * (x_end - x_start) / (n_points - 1) for i in range(n_points)]
y0 = 1.0
h = x[1] - x[0]
y = [y0]
for i in range(1, len(x)):
    y.append(y[-1] + h * dy_dx(y[-1], x[i-1]))

# Create a new div element to hold the plot
#plot_div = document.createElement('div')
#plot_div.id = 'plot'
#document.body.appendChild(plot_div)
plot_div = document["brython_div"]

# Plot the solution using plotly.js
data = [{'x': x, 'y': y}]
window.Plotly.newPlot('brython_div', data)
</script>
<script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
</p>
<p>Brython environment and Plotly.js:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;script src="/static/brython.js"&gt;&lt;/script&gt;
&lt;script src="/static/brython_stdlib.js"&gt;&lt;/script&gt;
&lt;script&gt;// &lt;![CDATA[
window.onload=function(){
brython({debug:1, pythonpath:['/static/']});
}
// ]]&gt;&lt;/script&gt;
&lt;p id="brython_div"&gt;&lt;/p&gt;</pre>
<p>Brython programe with Plotly.js:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import document, window

def dy_dx(y, x):
    return x - y

x_start = 0
x_end = 5
n_points = 100
x = [x_start + i * (x_end - x_start) / (n_points - 1) for i in range(n_points)]
y0 = 1.0
h = x[1] - x[0]
y = [y0]
for i in range(1, len(x)):
    y.append(y[-1] + h * dy_dx(y[-1], x[i-1]))

# Create a new div element to hold the plot
#plot_div = document.createElement('div')
#plot_div.id = 'plot'
#document.body.appendChild(plot_div)
plot_div = document["brython_div"]

# Plot the solution using plotly.js
data = [{'x': x, 'y': y}]
window.Plotly.newPlot('brython_div', data)</pre>
<p></p><h2>ANSIC</h2>
<p>Based on <a href="https://study.com/academy/lesson/ansi-c-history-formation-structure.html">study.com</a>: The C programming language was developed in the <a href="https://en.wikipedia.org/wiki/Bell_Labs">Bell Labs</a> of AT&amp;T by an employee called <a href="https://en.wikipedia.org/wiki/Dennis_Ritchie">Dennis Ritchie</a> between 1969 and 1973 while working on Unix operating system. He created this language using <a href="https://en.wikipedia.org/wiki/ALGOL">ALGOL</a>, <a href="https://en.wikipedia.org/wiki/BCPL">BCPL</a>, and <a href="https://en.wikipedia.org/wiki/B_(programming_language)">B</a> the languages that were used before C was created. He added many powerful features to C and used it to further develop the <a href="https://en.wikipedia.org/wiki/Unix">UNIX</a> operating system. <a href="https://en.wikipedia.org/wiki/American_National_Standards_Institute">American National Standards Institute</a> (ANSI) in 1983, formed a committee to provide a comprehensive definition to the C language and thus came into existence the new ANSI C language with better features.</p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4612-1484-7">C Programming</a> (1999)</p>
<p><a href="https://link.springer.com/book/10.1007/978-3-030-50750-3">Computer Programming in C for Beginners</a> (2020)</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">// Our first program
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
int main()
{
    printf("Hello world!\n");
    return 0;
}</pre>
<p><a href="https://gmnfuedutw-my.sharepoint.com/:u:/g/personal/yen_gm_nfu_edu_tw/EXxz57GzrnBKmnniJvffmoABCDC_cUCbqlTa4cx29dC_UA?e=iCaVgk">cp2022_ANSIC_w_tinyc_scite.7z</a> (for cp2022 @gm users only) / <a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EU0vRPRqlYlEgS4rJzcAq-0BDP2Lac2WfJl9dSAz2UEkgA?e=uo0n6a">cp2022_ANSIC_w_tinyc_scite.7z for @nfu</a></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">// from https://stackoverflow.com/questions/6127503/shuffle-array-in-c
#include &lt;stdio.h&gt; //for printf()
#include &lt;stdlib.h&gt; //for srand() and rand()
#include &lt;time.h&gt; //for time()
#include &lt;memory.h&gt; //for memcpy()
// 作業, 請計算各數值在各位數出現的總數, 是否依照亂數機率出現?
// 作業, 請將此程式改用 Brython 編寫.

void main ()
{
    int elesize = sizeof (int);
    int i;
    int j;
    int r;
    int num = 10;
    int times = 50;
    int src [num];
    int tgt [num];
    
    srand ( (unsigned int) time (0) );
    
    for (j = 0; j &lt; times; j++)
    {
        for (i = 0; i &lt; num; src [i] = i++);
        
        for (i = num; i &gt; 0; i --)
        {
            r = rand () % i;
            memcpy (&amp;tgt [num - i], &amp;src [r], elesize);
            memcpy (&amp;src [r], &amp;src [i - 1], elesize);
        }
        
        for (i = 0; i &lt; num; printf ("%d ", tgt [i++] ) );
        printf("\n");
    }
}</pre>
<p>利用 <a href="https://en.wikipedia.org/wiki/Differential_evolution">Differential Evoluation</a> (差分進化演算法), 以 <a href="https://en.wikipedia.org/wiki/ANSI_C">ANSI C</a> 程式語言編寫適應方程式的最大化或最小化演算:</p>
<p style="padding-left: 30px;"><a href="/downloads/volume_in_de_ex1.c">volume_in_de_ex1.c</a></p>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecourse/b5df54ab3d5f2f079f785541d1178a66">其他範例程式</a></p>
<p style="padding-left: 30px;">相同演算法, 以 CPython 解題:</p>
<p style="padding-left: 60px;"><a href="/downloads/volume_in_de_ex1.py">volume_in_de_ex1.py</a></p>
<p style="padding-left: 30px;">相同演算法, <a href="https://mde.tw/cp2022/content/Brython.html?src=https://gist.githubusercontent.com/mdecourse/b5df54ab3d5f2f079f785541d1178a66/raw/ccdea7b056702bcf06ed24c7407a43e0a1aacdbc/volume_in_de_ex1.py">以 Brython 解題</a>.</p>
<p style="padding-left: 30px;">此一採<a href="https://www.analyzemath.com/calculus/Problems/maximum_volume_problem.html">固定表面積的紙盒體積最大化</a>運算範例, <a href="/downloads/volume_in_de_ex1.py">volume_in_de_ex1.py</a> 的原始作者為<a href="https://hdl.handle.net/11296/tur9hu">李孟恭</a> (<a href="https://github.com/kmollee/algorithm/blob/master/de.py">https://github.com/kmollee/algorithm/blob/master/de.py</a>)</p>
<p>從 <a href="https://github.com/Akagi201/lw_oopc/blob/master/doc/%E8%BD%BB%E9%87%8F%E7%BA%A7%E7%9A%84%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1C%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B%E6%A1%86%E6%9E%B6%E4%BB%8B%E7%BB%8D.md">lw-oopc 的簡介</a> 以及<a href="https://github.com/Akagi201/lw_oopc">升級版 lw-oopc 原始碼</a>中, 則可以進一步對 ANSI C 在嵌入式 (embedded) 系統上的應用有所了解.</p><h2>Brython_ex</h2>
<p>
<script src="/static/brython.js">
</script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- for ggame -->
<p>
<script src="/static/jquery-3.3.1.min.js"></script>
<script src="/static/jquery-ui.1.12.1.min.js"></script>
<script src="/static/pixi-3.0.5.min.js"></script>
<script src="/static/buzz-1.2.1.js"></script>
<script src="/static/bs.js"></script>
<script src="/downloads/brython_modules.js"></script>
</p>
<!-- Cango 程式庫 -->
<p>
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/CangoAxes-6v01-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<!-- for Konva 程式庫 -->
<p>
<script src="/static/konva.min.js"></script>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p><button id="add1to100">add 1 to 100</button><button id="p261">p261</button><button id="rocflag">ROC flag</button><button id="procflag">PROC flag</button><button id="usaflag">USA flag</button><button id="drawgrid">Draw Grid</button><button id="grid_rect">Random Rect</button><button id="rect_walk">Rect Walk</button><button id="rect_u_walk">Rect U Walk</button><button id="rect_rev_u_walk">Rect rev U Walk</button><button id="sgcr">單節貪食蛇</button><button id="cfrr">5 個紅點方塊</button><button id="snake">Snake</button><button id="bsnake">BSnake</button><button id="auto_guess">auto_guess</button><button id="ball">ball</button><button id="bezier">bezier</button><button id="big_lotto">big_lotto</button><button id="brython_kw">brython_kw</button><button id="bunny">bunny</button><button id="cango_spur">cango_spur</button><button id="cango_spur1">cango_spur1</button><button id="cango_three_gears">cango_three_gears</button><button id="clear">clear</button><button id="clock">clock</button><button id="convert_temp">convert_temp</button><button id="deepmerge">deepmerge</button><button id="display_stl">display_stl</button><button id="draw">draw</button><button id="ex1">ex1</button><button id="ex2">ex2</button><button id="ex3">ex3</button><button id="ex4">ex4</button><button id="fibo">fibo</button><button id="fourbar">fourbar</button><button id="guess_a_number">guess_a_number</button><button id="hw1_1">hw1_1</button><button id="hw1_2">hw1_2</button><button id="keycode">Keycode</button><button id="knova1">knova1</button><button id="merge3">merge3</button><button id="power_lotto">power_lotto</button><button id="spur">spur</button><button id="spur_w_form">spur_w_form</button><button id="stl_binary_ascii">stl_binary_ascii</button><button id="stl_writer">stl_writer</button><button id="tetris">Tetris</button><button id="auto_tetris">Auto Tetris</button><button id="turtle1">turtle1</button><button id="turtle2">turtle2</button><button id="turtle3">turtle3</button><button id="turtle4">turtle4</button><button id="turtle5">turtle5</button><button id="turtle6">turtle6</button><button id="turtle7">turtle7</button><button id="turtle8">turtle8</button><button id="twl_link_ik">twl_link_ik</button><button id="webcam">webcam</button><button id="websocket">websocket</button><button id="ycqsort">ycqsort</button></p>
<p><!-- ######################  editor1 開始 ###################### --></p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div 作為切入位置 --></p>
<p><!-- 這裡的畫布 id 為 brython_div --></p>
<div id="brython_div"></div>
<!-- graphics-column is for ggame -->
<div class="col-md-0" height="1" id="graphics-column" width="1"></div>
<p><!-- ######################  editor1 結束 ###################### --></p>
<p><!-- 以下可以開始利用 editor1 的設定編寫對應 Brython 程式 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    # 注意這裡清除的畫布 id 為 brython_div
    bd = doc["brython_div"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
<!-- 以上為內建程式, 頁面可透過 ?src=gist_url 執行 --></p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace2.editor.setValue(open(self.url).read())
        Ace2.editor.scrollToRow(0)
        Ace2.editor.gotoLine(0)
        Ace2.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"
add1to100 = button2(add1to100_url)
doc["add1to100"].bind('click', add1to100.do)
################################# p261 start 
p261_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/980606effcd29635307d6474718cd4a7ef016747/p261.py"
p261 = button2(p261_url)
doc["p261"].bind('click', p261.do)
################################## p261 end
################################## rocflag start
rocflag_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/03dd57e75b6b5be2b3d64c4fd15758e80cb9bf36/roc_flag.py"
rocflag = button2(rocflag_url)
doc["rocflag"].bind("click", rocflag.do)
################################## rocflag end
################################## procflag start
procflag_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/03dd57e75b6b5be2b3d64c4fd15758e80cb9bf36/proc_flag.py"
procflag = button2(procflag_url)
doc["procflag"].bind("click", procflag.do)
################################## rocflag end
################################## drawgrid start
drawgrid_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/070f424f2e9a99617009af216762163f66628e6d/draw_grid.py"
drawgrid = button2(drawgrid_url)
doc["drawgrid"].bind("click", drawgrid.do)
################################## drawgrid end
################################## grid_rect start
grid_rect_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/f3683ed24646f63625b616e9cb8e61a9a08ae9be/draw_grid_random_rect.py"
grid_rect = button2(grid_rect_url)
doc["grid_rect"].bind("click", grid_rect.do)
################################## grid_rect end
################################## rect_walk start
rect_walk_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/fdf9749488a59f00c2398aede8b6cbe8c0ed5d81/rect_walk.py"
rect_walk = button2(rect_walk_url)
doc["rect_walk"].bind("click", rect_walk.do)
################################## rect_walk end
################################## rect_walk start
rect_u_walk_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/63645d3f5823fd22bdb02e840e46e551afee4087/rect_u_walk.py"
rect_u_walk = button2(rect_u_walk_url)
doc["rect_u_walk"].bind("click", rect_u_walk.do)
################################## rect_walk end
################################## rect_rev_u_walk start
rect_rev_u_walk_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/165e7792091d4b91b9923592242bfaf28258a719/rect_rev_u_walk.py"
rect_rev_u_walk = button2(rect_rev_u_walk_url)
doc["rect_rev_u_walk"].bind("click", rect_rev_u_walk.do)
################################## rect_rev_u_walk end
################################## single green chasing red start
sgcr_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/9f7c1cda3a51b061cde00d104054fb3ce19ffd1a/single_green_chasing_red.py"
sgcr = button2(sgcr_url)
doc["sgcr"].bind("click", sgcr.do)
################################## single green chasing red end
################################## chasing 5 red rect start
# execute only one time
#cfrr_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/c43844d62a0bd7eb6617d5222ba93b5de033a63f/chasing_5_red_rect.py"
# continuously execution
cfrr_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/7e0563617649a2532ed0fc903858e135cbcedcd0/chasing_5_red_rect.py"
cfrr = button2(cfrr_url)
doc["cfrr"].bind("click", cfrr.do)
################################## chasing 5 red rect end
################################## usaflag start
usaflag_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/144b62fa07987d5ab6f369ae3661c645405e1872/usaflag.py"
usaflag = button2(usaflag_url)
doc["usaflag"].bind("click", usaflag.do)
################################## usaflag end
################################## snake start
snake_url = "https://gist.githubusercontent.com/mdecourse/d55158478f4f8fcbfedd455f8be8c7b6/raw/f29309745a98687ed5c41cf90d28ef25a1e48dd4/snake_brython_div.py"
snake = button2(snake_url)
doc["snake"].bind("click", snake.do)
################################## snake end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecourse/2a8f213b6858a40481d17556c8a2fe86/raw/0a4a824493865dc7cf56977d03c9438d002b4268/kmlo_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## auto_guess start
auto_guess_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/auto_guess.py"
auto_guess = button2(auto_guess_url)
doc["auto_guess"].bind("click", auto_guess.do)
################################## auto_guess end
################################## ball start
ball_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/ball.py"
ball = button2(ball_url)
doc["ball"].bind("click", ball.do)
################################## ball end
################################## bezier start
bezier_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/79794cbd97d0846e2c9df14d54118d5e00a97a22/bezier.py"
bezier = button2(bezier_url)
doc["bezier"].bind("click", bezier.do)
################################## bezier end
################################## big_lotto start
big_lotto_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/big_lotto.py"
big_lotto = button2(big_lotto_url)
doc["big_lotto"].bind("click", big_lotto.do)
################################## big_lotto end
################################## brython_kw start
brython_kw_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/brython_kw.py"
brython_kw = button2(brython_kw_url)
doc["brython_kw"].bind("click", brython_kw.do)
################################## brython_kw end
################################## bunny start
bunny_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/bunny.py"
bunny = button2(bunny_url)
doc["bunny"].bind("click", bunny.do)
################################## bunny end
################################## cango_spur start
cango_spur_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/cango_spur.py"
cango_spur = button2(cango_spur_url)
doc["cango_spur"].bind("click", cango_spur.do)
################################## cango_spur end
################################## cango_spur1 start
cango_spur1_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/cango_spur1.py"
cango_spur1 = button2(cango_spur1_url)
doc["cango_spur1"].bind("click", cango_spur1.do)
################################## cango_spur1 end
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/cango_three_gears.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## clear start
clear_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/clear.py"
clear = button2(clear_url)
doc["clear"].bind("click", clear.do)
################################## clear end
################################## clock start
clock_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/clock.py"
clock = button2(clock_url)
doc["clock"].bind("click", clock.do)
################################## clock end
################################## convert_temp start
convert_temp_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/convert_temp.py"
convert_temp = button2(convert_temp_url)
doc["convert_temp"].bind("click", convert_temp.do)
################################## convert_temp end
################################## display_stl start
display_stl_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/display_stl.py"
display_stl = button2(display_stl_url)
doc["display_stl"].bind("click", display_stl.do)
################################## display_stl end
################################## draw start
draw_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/draw.py"
draw = button2(draw_url)
doc["draw"].bind("click", draw.do)
################################## draw end
################################## ex1 start
ex1_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/ex1.py"
ex1 = button2(ex1_url)
doc["ex1"].bind("click", ex1.do)
################################## ex1 end
################################## ex2 start
ex2_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/ex2.py"
ex2 = button2(ex2_url)
doc["ex2"].bind("click", ex2.do)
################################## ex2 end
################################## ex3 start
ex3_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/ex3.py"
ex3 = button2(ex3_url)
doc["ex3"].bind("click", ex3.do)
################################## ex3 end
################################## ex4 start
ex4_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/ex4.py"
ex4 = button2(ex4_url)
doc["ex4"].bind("click", ex4.do)
################################## ex4 end
################################## fourbar start
fourbar_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/fa232853da824f6dd5ae1f61a96543e6106c04b5/fourbar.py"
fourbar = button2(fourbar_url)
doc["fourbar"].bind("click", fourbar.do)
################################## fourbar end
################################## guess_a_number start
guess_a_number_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/guess_a_number.py"
guess_a_number = button2(guess_a_number_url)
doc["guess_a_number"].bind("click", guess_a_number.do)
################################## guess_a_number end
################################## hw1_1 start
hw1_1_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/hw1-1.py"
hw1_1 = button2(hw1_1_url)
doc["hw1_1"].bind("click", hw1_1.do)
################################## hw1_1 end
################################## hw1_2 start
hw1_2_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/hw1-2.py"
hw1_2 = button2(hw1_2_url)
doc["hw1_2"].bind("click", hw1_2.do)
################################## hw1-2 end
################################## knova1 start
knova1_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/konva1.py"
knova1 = button2(knova1_url)
doc["knova1"].bind("click", knova1.do)
################################## knova1 end
################################## power_lotto start
power_lotto_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/power_lotto.py"
power_lotto = button2(power_lotto_url)
doc["power_lotto"].bind("click", power_lotto.do)
################################## power_lotto end
################################## spur start
spur_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/e6d0cc9302f7b43bd36321d69c2433bec2cbcfd4/spur.py"
spur = button2(spur_url)
doc["spur"].bind("click", spur.do)
################################## spur end
################################## spur_w_form start
spur_w_form_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/e6d0cc9302f7b43bd36321d69c2433bec2cbcfd4/spur_w_form.py"
spur_w_form = button2(spur_w_form_url)
doc["spur_w_form"].bind("click", spur_w_form.do)
################################## spur_w_form end
################################## stl_binary_ascii start
stl_binary_ascii_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/stl_binary_ascii.py"
stl_binary_ascii = button2(stl_binary_ascii_url)
doc["stl_binary_ascii"].bind("click", stl_binary_ascii.do)
################################## stl_binary_ascii end
################################## stl_writer start
stl_writer_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/stl_writer.py"
stl_writer = button2(stl_writer_url)
doc["stl_writer"].bind("click", stl_writer.do)
################################## stl_writer end
################################## turtle1 start
turtle1_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle1.py"
turtle1 = button2(turtle1_url)
doc["turtle1"].bind("click", turtle1.do)
################################## turtle1 end
################################## turtle2 start
turtle2_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle2.py"
turtle2 = button2(turtle2_url)
doc["turtle2"].bind("click", turtle2.do)
################################## turtle2 end
################################## turtle3 start
turtle3_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle3.py"
turtle3 = button2(turtle3_url)
doc["turtle3"].bind("click", turtle3.do)
################################## turtle3 end
################################## turtle4 start
turtle4_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle4.py"
turtle4 = button2(turtle4_url)
doc["turtle4"].bind("click", turtle4.do)
################################## turtle4 end
################################## turtle5 start
turtle5_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle5.py"
turtle5 = button2(turtle5_url)
doc["turtle5"].bind("click", turtle5.do)
################################## turtle5 end
################################## turtle6 start
turtle6_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle6.py"
turtle6 = button2(turtle6_url)
doc["turtle6"].bind("click", turtle6.do)
################################## turtle6 end
################################## turtle7 start
turtle7_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle7.py"
turtle7 = button2(turtle7_url)
doc["turtle7"].bind("click", turtle7.do)
################################## turtle7 end
################################## turtle8 start
turtle8_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle8.py"
turtle8 = button2(turtle8_url)
doc["turtle8"].bind("click", turtle8.do)
################################## turtle8 end
################################## twl_link_ik start
twl_link_ik_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/twl_link_ik.py"
twl_link_ik = button2(twl_link_ik_url)
doc["twl_link_ik"].bind("click", twl_link_ik.do)
################################## twl_link_ik end
################################## webcam start
webcam_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/webcam.py"
webcam = button2(webcam_url)
doc["webcam"].bind("click", webcam.do)
################################## webcam end
################################## ycqsort start
ycqsort_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/ycqsort.py"
ycqsort = button2(ycqsort_url)
doc["ycqsort"].bind("click", ycqsort.do)
################################## ycqsort end
################################## fibo start
fibo_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/fa232853da824f6dd5ae1f61a96543e6106c04b5/fibo_ex.py"
fibo = button2(fibo_url)
doc["fibo"].bind("click", fibo.do)
################################## fibo end
################################## deepmerge start
deepmerge_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/e89e0f978a015bf9361270a389a5b84e6244ed5b/deepmerge.py"
deepmerge = button2(deepmerge_url)
doc["deepmerge"].bind("click", deepmerge.do)
################################## deepmerge end
################################## merge3 start
merge3_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/8a7452a451e57e4de720f22fc2fc8abd6aac0bc8/merge3.py"
merge3 = button2(merge3_url)
doc["merge3"].bind("click", merge3.do)
################################## merge3 end
################################## websocket start
websocket_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/86dda666271974d6c520086700db14a2124f0ae8/websocket.py"
websocket = button2(websocket_url)
doc["websocket"].bind("click", websocket.do)
################################## websocket end
################################## keycode start
keycode_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/ba159101705aaf8ba182a442b455425a48a85610/keycode.py"
keycode = button2(keycode_url)
doc["keycode"].bind("click", keycode.do)
################################## keycode end
################################## tetris start
tetris_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/738223b424c3f5f12961070aa8a75185177420b6/pygame_to_brython_tetris.py"
tetris = button2(tetris_url)
doc["tetris"].bind("click", tetris.do)
################################## tetris end
################################## auto tetris start
auto_tetris_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/45740f32e5c3ee292a88df8a47f46e60039b77f9/pygame_to_brython_tetris_ai.py"
auto_tetris = button2(auto_tetris_url)
doc["auto_tetris"].bind("click", auto_tetris.do)
################################## auto tetris end
</script>
</p>